[
{"id": "TA0105", "name": "Impact", "description": "The adversary is trying to manipulate, interrupt, or destroy your ICS systems, data, and their surrounding environment.", "url": "https://attack.mitre.org/tactics/TA0105", "techniques": [{"technique_id": "T0879", "technique_name": "Damage to Property", "technique_description": "Adversaries may cause damage and destruction of property to infrastructure, equipment, and the surrounding environment when attacking control systems. This technique may result in device and operational equipment breakdown, or represent tangential damage from other techniques used in an attack. Depending on the severity of physical damage and disruption caused to control processes and systems, this technique may result in", "technique_url": "https://attack.mitre.org/techniques/T0879"}, {"technique_id": "T0813", "technique_name": "Denial of Control", "technique_description": "Adversaries may cause a denial of control to temporarily prevent operators and engineers from interacting with process controls. An adversary may attempt to deny process control access to cause a temporary loss of communication with the control device or to prevent operator adjustment of process controls. An affected process may still be operating during the period of control loss, but not necessarily in a desired state.", "technique_url": "https://attack.mitre.org/techniques/T0813"}, {"technique_id": "T0815", "technique_name": "Denial of View", "technique_description": "Adversaries may cause a denial of view in attempt to disrupt and prevent operator oversight on the status of an ICS environment. This may manifest itself as a temporary communication failure between a device and its control source, where the interface recovers and becomes available once the interference ceases.", "technique_url": "https://attack.mitre.org/techniques/T0815"}, {"technique_id": "T0826", "technique_name": "Loss of Availability", "technique_description": "Adversaries may attempt to disrupt essential components or systems to prevent owner and operator from delivering products or services.", "technique_url": "https://attack.mitre.org/techniques/T0826"}, {"technique_id": "T0827", "technique_name": "Loss of Control", "technique_description": "Adversaries may seek to achieve a sustained loss of control or a runaway condition in which operators cannot issue any commands even if the malicious interference has subsided.", "technique_url": "https://attack.mitre.org/techniques/T0827"}, {"technique_id": "T0828", "technique_name": "Loss of Productivity and Revenue", "technique_description": "Adversaries may cause loss of productivity and revenue through disruption and even damage to the availability and integrity of control system operations, devices, and related processes. This technique may manifest as a direct effect of an ICS-targeting attack or tangentially, due to an IT-targeting attack against non-segregated environments.", "technique_url": "https://attack.mitre.org/techniques/T0828"}, {"technique_id": "T0837", "technique_name": "Loss of Protection", "technique_description": "Adversaries may compromise protective system functions designed to prevent the effects of faults and abnormal conditions. This can result in equipment damage, prolonged process disruptions and hazards to personnel.", "technique_url": "https://attack.mitre.org/techniques/T0837"}, {"technique_id": "T0880", "technique_name": "Loss of Safety", "technique_description": "Adversaries may compromise safety system functions designed to maintain safe operation of a process when unacceptable or dangerous conditions occur. Safety systems are often composed of the same elements as control systems but have the sole purpose of ensuring the process fails in a predetermined safe manner.", "technique_url": "https://attack.mitre.org/techniques/T0880"}, {"technique_id": "T0829", "technique_name": "Loss of View", "technique_description": "Adversaries may cause a sustained or permanent loss of view where the ICS equipment will require local, hands-on operator intervention; for instance, a restart or manual operation. By causing a sustained reporting or visibility loss, the adversary can effectively hide the present state of operations. This loss of view can occur without affecting the physical processes themselves.", "technique_url": "https://attack.mitre.org/techniques/T0829"}, {"technique_id": "T0831", "technique_name": "Manipulation of Control", "technique_description": "Adversaries may manipulate physical process control within the industrial environment. Methods of manipulating control can include changes to set point values, tags, or other parameters. Adversaries may manipulate control systems devices or possibly leverage their own, to communicate with and command physical control processes. The duration of manipulation may be temporary or longer sustained, depending on operator detection.", "technique_url": "https://attack.mitre.org/techniques/T0831"}, {"technique_id": "T0832", "technique_name": "Manipulation of View", "technique_description": "Adversaries may attempt to manipulate the information reported back to operators or controllers. This manipulation may be short term or sustained. During this time the process itself could be in a much different state than what is reported.", "technique_url": "https://attack.mitre.org/techniques/T0832"}, {"technique_id": "T0882", "technique_name": "Theft of Operational Information", "technique_description": "Adversaries may steal operational information on a production environment as a direct mission outcome for personal gain or to inform future operations. This information may include design documents, schedules, rotational data, or similar artifacts that provide insight on operations.    In the Bowman Dam incident, adversaries probed systems for operational data.", "technique_url": "https://attack.mitre.org/techniques/T0882"}]},
{"id": "TA0107", "name": "Inhibit Response Function", "description": "The adversary is trying to prevent your safety, protection, quality assurance, and operator intervention functions from responding to a failure, hazard, or unsafe state.", "url": "https://attack.mitre.org/tactics/TA0107", "techniques": [{"technique_id": "T0800", "technique_name": "Activate Firmware Update Mode", "technique_description": "Adversaries may activate firmware update mode on devices to prevent expected response functions from engaging in reaction to an emergency or process malfunction. For example, devices such as protection relays may have an operation mode designed for firmware installation. This mode may halt process monitoring and related functions to allow new firmware to be loaded. A device left in update mode may be placed in an inactive holding state if no firmware is provided to it. By entering and leaving a device in this mode, the adversary may deny its usual functionalities.", "technique_url": "https://attack.mitre.org/techniques/T0800"}, {"technique_id": "T0878", "technique_name": "Alarm Suppression", "technique_description": "Adversaries may target protection function alarms to prevent them from notifying operators of critical conditions. Alarm messages may be a part of an overall reporting system and of particular interest for adversaries. Disruption of the alarm system does not imply the disruption of the reporting system as a whole.", "technique_url": "https://attack.mitre.org/techniques/T0878"}, {"technique_id": "T0803", "technique_name": "Block Command Message", "technique_description": "Adversaries may block a command message from reaching its intended target to prevent command execution. In OT networks, command messages are sent to provide instructions to control system devices. A blocked command message can inhibit response functions from correcting a disruption or unsafe condition.", "technique_url": "https://attack.mitre.org/techniques/T0803"}, {"technique_id": "T0804", "technique_name": "Block Reporting Message", "technique_description": "Adversaries may block or prevent a reporting message from reaching its intended target. In control systems, reporting messages contain telemetry data (e.g., I/O values) pertaining to the current state of equipment and the industrial process. By blocking these reporting messages, an adversary can potentially hide their actions from an operator.", "technique_url": "https://attack.mitre.org/techniques/T0804"}, {"technique_id": "T0805", "technique_name": "Block Serial COM", "technique_description": "Adversaries may block access to serial COM to prevent instructions or configurations from reaching target devices. Serial Communication ports (COM) allow communication with control system devices. Devices can receive command and configuration messages over such serial COM. Devices also use serial COM to send command and reporting messages. Blocking device serial COM may also block command messages and block reporting messages.", "technique_url": "https://attack.mitre.org/techniques/T0805"}, {"technique_id": "T0892", "technique_name": "Change Credential", "technique_description": "Adversaries may modify software and device credentials to prevent operator and responder access. Depending on the device, the modification or addition of this password could prevent any device configuration actions from being accomplished and may require a factory reset or replacement of hardware. These credentials are often built-in features provided by the device vendors as a means to restrict access to management interfaces.", "technique_url": "https://attack.mitre.org/techniques/T0892"}, {"technique_id": "T0809", "technique_name": "Data Destruction", "technique_description": "Adversaries may perform data destruction over the course of an operation. The adversary may drop or create malware, tools, or other non-native files on a target system to accomplish this, potentially leaving behind traces of malicious activities. Such non-native files and other data may be removed over the course of an intrusion to maintain a small footprint or as a standard part of the post-intrusion cleanup process.", "technique_url": "https://attack.mitre.org/techniques/T0809"}, {"technique_id": "T0814", "technique_name": "Denial of Service", "technique_description": "Adversaries may perform Denial-of-Service (DoS) attacks to disrupt expected device functionality. Examples of DoS attacks include overwhelming the target device with a high volume of requests in a short time period and sending the target device a request it does not know how to handle. Disrupting device state may temporarily render it unresponsive, possibly lasting until a reboot can occur. When placed in this state, devices may be unable to send and receive requests, and may not perform expected response functions in reaction to other events in the environment.", "technique_url": "https://attack.mitre.org/techniques/T0814"}, {"technique_id": "T0816", "technique_name": "Device Restart/Shutdown", "technique_description": "Adversaries may forcibly restart or shutdown a device in an ICS environment to disrupt and potentially negatively impact physical processes. Methods of device restart and shutdown exist in some devices as built-in, standard functionalities. These functionalities can be executed using interactive device web interfaces, CLIs, and network protocol commands.", "technique_url": "https://attack.mitre.org/techniques/T0816"}, {"technique_id": "T0835", "technique_name": "Manipulate I/O Image", "technique_description": "Adversaries may manipulate the I/O image of PLCs through various means to prevent them from functioning as expected. Methods of I/O image manipulation may include overriding the I/O table via direct memory manipulation or using the override function used for testing PLC programs.  During the scan cycle, a PLC reads the status of all inputs and stores them in an image table.  The image table is the PLCs internal storage location where values of inputs/outputs for one scan are stored while it executes the user program. After the PLC has solved the entire logic program, it updates the output image table. The contents of this output image table are written to the corresponding output points in I/O Modules.", "technique_url": "https://attack.mitre.org/techniques/T0835"}, {"technique_id": "T0838", "technique_name": "Modify Alarm Settings", "technique_description": "Adversaries may modify alarm settings to prevent alerts that may inform operators of their presence or to prevent responses to dangerous and unintended scenarios. Reporting messages are a standard part of data acquisition in control systems. Reporting messages are used as a way to transmit system state information and acknowledgements that specific actions have occurred. These messages provide vital information for the management of a physical process, and keep operators, engineers, and administrators aware of the state of system devices and physical processes.", "technique_url": "https://attack.mitre.org/techniques/T0838"}, {"technique_id": "T0851", "technique_name": "Rootkit", "technique_description": "Adversaries may deploy rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting and modifying operating-system API calls that supply system information. Rootkits or rootkit-enabling functionality may reside at the user or kernel level in the operating system, or lower.", "technique_url": "https://attack.mitre.org/techniques/T0851"}, {"technique_id": "T0881", "technique_name": "Service Stop", "technique_description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.   Services may not allow for modification of their data stores while running. Adversaries may stop services in order to conduct Data Destruction.", "technique_url": "https://attack.mitre.org/techniques/T0881"}, {"technique_id": "T0857", "technique_name": "System Firmware", "technique_description": "System firmware on modern assets is often designed with an update feature. Older device firmware may be factory installed and require special reprograming equipment. When available, the firmware update feature enables vendors to remotely patch bugs and perform upgrades. Device firmware updates are often delegated to the user and may be done using a software update package. It may also be possible to perform this task over the network.", "technique_url": "https://attack.mitre.org/techniques/T0857"}]},
{"id": "TA0109", "name": "Lateral Movement", "description": "The adversary is trying to move through your ICS environment.", "url": "https://attack.mitre.org/tactics/TA0109", "techniques": [{"technique_id": "T0812", "technique_name": "Default Credentials", "technique_description": "Adversaries may leverage manufacturer or supplier set default credentials on control system devices. These default credentials may have administrative permissions and may be necessary for initial configuration of the device. It is general best practice to change the passwords for these accounts as soon as possible, but some manufacturers may have devices that have passwords or usernames that cannot be changed.", "technique_url": "https://attack.mitre.org/techniques/T0812"}, {"technique_id": "T0866", "technique_name": "Exploitation of Remote Services", "technique_description": "Adversaries may exploit a software vulnerability to take advantage of a programming error in a program, service, or within the operating system software or kernel itself to enable remote service abuse. A common goal for post-compromise exploitation of remote services is for initial access into and lateral movement throughout the ICS environment to enable access to targeted systems.", "technique_url": "https://attack.mitre.org/techniques/T0866"}, {"technique_id": "T0891", "technique_name": "Hardcoded Credentials", "technique_description": "Adversaries may leverage credentials that are hardcoded in software or firmware to gain an unauthorized interactive user session to an asset. Examples credentials that may be hardcoded in an asset include:", "technique_url": "https://attack.mitre.org/techniques/T0891"}, {"technique_id": "T0867", "technique_name": "Lateral Tool Transfer", "technique_description": "Adversaries may transfer tools or other files from one system to another to stage adversary tools or other files over the course of an operation.  Copying of files may also be performed laterally between internal victim systems to support Lateral Movement with remote Execution using inherent file sharing protocols such as file sharing over SMB to connected network shares.", "technique_url": "https://attack.mitre.org/techniques/T0867"}, {"technique_id": "T0843", "technique_name": "Program Download", "technique_description": "Adversaries may perform a program download to transfer a user program to a controller.", "technique_url": "https://attack.mitre.org/techniques/T0843"}, {"technique_id": "T0886", "technique_name": "Remote Services", "technique_description": "Adversaries may leverage remote services to move between assets and network segments. These services are often used to allow operators to interact with systems remotely within the network, some examples are RDP, SMB, SSH, and other similar mechanisms.", "technique_url": "https://attack.mitre.org/techniques/T0886"}, {"technique_id": "T0859", "technique_name": "Valid Accounts", "technique_description": "Adversaries may steal the credentials of a specific user or service account using credential access techniques. In some cases, default credentials for control system devices may be publicly available. Compromised credentials may be used to bypass access controls placed on various resources on hosts and within the network, and may even be used for persistent access to remote systems. Compromised and default credentials may also grant an adversary increased privilege to specific systems and devices or access to restricted areas of the network. Adversaries may choose not to use malware or tools, in conjunction with the legitimate access those credentials provide, to make it harder to detect their presence or to control devices and send legitimate commands in an unintended way.", "technique_url": "https://attack.mitre.org/techniques/T0859"}]},
{"id": "TA0102", "name": "Discovery", "description": "The adversary is locating information to assess and identify their targets in your environment.", "url": "https://attack.mitre.org/tactics/TA0102", "techniques": [{"technique_id": "T0840", "technique_name": "Network Connection Enumeration", "technique_description": "Adversaries may perform network connection enumeration to discover information about device communication patterns. If an adversary can inspect the state of a network connection with tools, such as Netstat, in conjunction with", "technique_url": "https://attack.mitre.org/techniques/T0840"}, {"technique_id": "T0842", "technique_name": "Network Sniffing", "technique_description": "Network sniffing is the practice of using a network interface on a computer system to monitor or capture information  regardless of whether it is the specified destination for the information.", "technique_url": "https://attack.mitre.org/techniques/T0842"}, {"technique_id": "T0846", "technique_name": "Remote System Discovery", "technique_description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for subsequent Lateral Movement or Discovery techniques. Functionality could exist within adversary tools to enable this, but utilities available on the operating system or vendor software could also be used.", "technique_url": "https://attack.mitre.org/techniques/T0846"}, {"technique_id": "T0888", "technique_name": "Remote System Information Discovery", "technique_description": "An adversary may attempt to get detailed information about remote systems and their peripherals, such as make/model, role, and configuration. Adversaries may use information from Remote System Information Discovery to aid in targeting and shaping follow-on behaviors. For example, the system's operational role and model information can dictate whether it is a relevant target for the adversary's operational objectives. In addition, the system's configuration may be used to scope subsequent technique usage.", "technique_url": "https://attack.mitre.org/techniques/T0888"}, {"technique_id": "T0887", "technique_name": "Wireless Sniffing", "technique_description": "Adversaries may seek to capture radio frequency (RF) communication used for remote control and reporting in distributed environments. RF communication frequencies vary between 3 kHz to 300 GHz, although are commonly between 300 MHz to 6 GHz.   The wavelength and frequency of the signal affect how the signal propagates through open air, obstacles (e.g. walls and trees) and the type of radio required to capture them. These characteristics are often standardized in the protocol and hardware and may have an effect on how the signal is captured. Some examples of wireless protocols that may be found in cyber-physical environments are: WirelessHART, Zigbee, WIA-FA, and 700 MHz Public Safety Spectrum.", "technique_url": "https://attack.mitre.org/techniques/T0887"}]},
{"id": "TA0101", "name": "Command and Control", "description": "The adversary is trying to communicate with and control compromised systems, controllers, and platforms with access to your ICS environment.", "url": "https://attack.mitre.org/tactics/TA0101", "techniques": [{"technique_id": "T0885", "technique_name": "Commonly Used Port", "technique_description": "Adversaries may communicate over a commonly used port to bypass firewalls or network detection systems and to blend in with normal network activity, to avoid more detailed inspection. They may use the protocol associated with the port, or a completely different protocol. They may use commonly open ports, such as the examples provided below.", "technique_url": "https://attack.mitre.org/techniques/T0885"}, {"technique_id": "T0884", "technique_name": "Connection Proxy", "technique_description": "Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications.", "technique_url": "https://attack.mitre.org/techniques/T0884"}, {"technique_id": "T0869", "technique_name": "Standard Application Layer Protocol", "technique_description": "Adversaries may establish command and control capabilities over commonly used application layer protocols such as HTTP(S), OPC, RDP, telnet, DNP3, and modbus. These protocols may be used to disguise adversary actions as benign network traffic. Standard protocols may be seen on their associated port or in some cases over a non-standard port.  Adversaries may use these protocols to reach out of the network for command and control, or in some cases to other infected devices within the network.", "technique_url": "https://attack.mitre.org/techniques/T0869"}]},
{"id": "TA0103", "name": "Evasion", "description": "The adversary is trying to avoid security defenses.", "url": "https://attack.mitre.org/tactics/TA0103", "techniques": [{"technique_id": "T0858", "technique_name": "Change Operating Mode", "technique_description": "Adversaries may change the operating mode of a controller to gain additional access to engineering functions such as Program Download.   Programmable controllers typically have several modes of operation that control the state of the user program and control access to the controllers API. Operating modes can be physically selected using a key switch on the face of the controller but may also be selected with calls to the controllers API. Operating modes and the mechanisms by which they are selected often vary by vendor and product line. Some commonly implemented operating modes are described below:", "technique_url": "https://attack.mitre.org/techniques/T0858"}, {"technique_id": "T0820", "technique_name": "Exploitation for Evasion", "technique_description": "Adversaries may exploit a software vulnerability to take advantage of a programming error in a program, service, or within the operating system software or kernel itself to evade detection. Vulnerabilities may exist in software that can be used to disable or circumvent security features.", "technique_url": "https://attack.mitre.org/techniques/T0820"}, {"technique_id": "T0872", "technique_name": "Indicator Removal on Host", "technique_description": "Adversaries may attempt to remove indicators of their presence on a system in an effort to cover their tracks. In cases where an adversary may feel detection is imminent, they may try to overwrite, delete, or cover up changes they have made to the device.", "technique_url": "https://attack.mitre.org/techniques/T0872"}, {"technique_id": "T0849", "technique_name": "Masquerading", "technique_description": "Adversaries may use masquerading to disguise a malicious application or executable as another file, to avoid operator and engineer suspicion. Possible disguises of these masquerading files can include commonly found programs, expected vendor executables and configuration files, and other commonplace application and naming conventions. By impersonating expected and vendor-relevant files and applications, operators and engineers may not notice the presence of the underlying malicious content and possibly end up running those masquerading as legitimate functions.", "technique_url": "https://attack.mitre.org/techniques/T0849"}, {"technique_id": "T0851", "technique_name": "Rootkit", "technique_description": "Adversaries may deploy rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting and modifying operating-system API calls that supply system information. Rootkits or rootkit-enabling functionality may reside at the user or kernel level in the operating system, or lower.", "technique_url": "https://attack.mitre.org/techniques/T0851"}, {"technique_id": "T0856", "technique_name": "Spoof Reporting Message", "technique_description": "Adversaries may spoof reporting messages in control system environments for evasion and to impair process control. In control systems, reporting messages contain telemetry data (e.g., I/O values) pertaining to the current state of equipment and the industrial process. Reporting messages are important for monitoring the normal operation of a system or identifying important events such as deviations from expected values.", "technique_url": "https://attack.mitre.org/techniques/T0856"}, {"technique_id": "T0894", "technique_name": "System Binary Proxy Execution", "technique_description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system.  Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands. Similarly, on Linux systems adversaries may abuse trusted binaries such as split to proxy execution of malicious commands.", "technique_url": "https://attack.mitre.org/techniques/T0894"}]},
{"id": "TA0106", "name": "Impair Process Control", "description": "The adversary is trying to manipulate, disable, or damage physical control processes.", "url": "https://attack.mitre.org/tactics/TA0106", "techniques": [{"technique_id": "T0806", "technique_name": "Brute Force I/O", "technique_description": "Adversaries may repetitively or successively change I/O point values to perform an action. Brute Force I/O may be achieved by changing either a range of I/O point values or a single point value repeatedly to manipulate a process function. The adversary's goal and the information they have about the target environment will influence which of the options they choose. In the case of brute forcing a range of point values, the adversary may be able to achieve an impact without targeting a specific point. In the case where a single point is targeted, the adversary may be able to generate instability on the process function associated with that particular point.", "technique_url": "https://attack.mitre.org/techniques/T0806"}, {"technique_id": "T0836", "technique_name": "Modify Parameter", "technique_description": "Adversaries may modify parameters used to instruct industrial control system devices. These devices operate via programs that dictate how and when to perform actions based on such parameters. Such parameters can determine the extent to which an action is performed and may specify additional options. For example, a program on a control system device dictating motor processes may take a parameter defining the total number of seconds to run that motor.", "technique_url": "https://attack.mitre.org/techniques/T0836"}, {"technique_id": "T0839", "technique_name": "Module Firmware", "technique_description": "Adversaries may install malicious or vulnerable firmware onto modular hardware devices. Control system devices often contain modular hardware devices. These devices may have their own set of firmware that is separate from the firmware of the main control system equipment.", "technique_url": "https://attack.mitre.org/techniques/T0839"}, {"technique_id": "T0856", "technique_name": "Spoof Reporting Message", "technique_description": "Adversaries may spoof reporting messages in control system environments for evasion and to impair process control. In control systems, reporting messages contain telemetry data (e.g., I/O values) pertaining to the current state of equipment and the industrial process. Reporting messages are important for monitoring the normal operation of a system or identifying important events such as deviations from expected values.", "technique_url": "https://attack.mitre.org/techniques/T0856"}, {"technique_id": "T0855", "technique_name": "Unauthorized Command Message", "technique_description": "Adversaries may send unauthorized command messages to instruct control system assets to perform actions outside of their intended functionality, or without the logical preconditions to trigger their expected function. Command messages are used in ICS networks to give direct instructions to control systems devices. If an adversary can send an unauthorized command message to a control system, then it can instruct the control systems device to perform an action outside the normal bounds of the device's actions. An adversary could potentially instruct a control systems device to perform an action that will cause an", "technique_url": "https://attack.mitre.org/techniques/T0855"}]},
{"id": "TA0100", "name": "Collection", "description": "The adversary is trying to gather data of interest and domain knowledge on your ICS environment to inform their goal.", "url": "https://attack.mitre.org/tactics/TA0100", "techniques": [{"technique_id": "T0830", "technique_name": "Adversary-in-the-Middle", "technique_description": "Adversaries with privileged network access may seek to modify network traffic in real time using adversary-in-the-middle (AiTM) attacks.  This type of attack allows the adversary to intercept traffic to and/or from a particular device on the network. If a AiTM attack is established, then the adversary has the ability to block, log, modify, or inject traffic into the communication stream. There are several ways to accomplish this attack, but some of the most-common are Address Resolution Protocol (ARP) poisoning and the use of a proxy.", "technique_url": "https://attack.mitre.org/techniques/T0830"}, {"technique_id": "T0802", "technique_name": "Automated Collection", "technique_description": "Adversaries may automate collection of industrial environment information using tools or scripts. This automated collection may leverage native control protocols and tools available in the control systems environment. For example, the OPC protocol may be used to enumerate and gather information. Access to a system or interface with these native protocols may allow collection and enumeration of other attached, communicating servers and devices.", "technique_url": "https://attack.mitre.org/techniques/T0802"}, {"technique_id": "T0811", "technique_name": "Data from Information Repositories", "technique_description": "Adversaries may target and collect data from information repositories. This can include sensitive data such as specifications, schematics, or diagrams of control system layouts, devices, and processes. Examples of information repositories include reference databases in the process environment, as well as databases in the corporate network that might contain information about the ICS.", "technique_url": "https://attack.mitre.org/techniques/T0811"}, {"technique_id": "T0893", "technique_name": "Data from Local System", "technique_description": "Adversaries may target and collect data from local system sources, such as file systems, configuration files, or local databases. This can include sensitive data such as specifications, schematics, or diagrams of control system layouts, devices, and processes.", "technique_url": "https://attack.mitre.org/techniques/T0893"}, {"technique_id": "T0868", "technique_name": "Detect Operating Mode", "technique_description": "Adversaries may gather information about a PLCs or controllers current operating mode. Operating modes dictate what change or maintenance functions can be manipulated and are often controlled by a key switch on the PLC (e.g.,  run, prog [program], and remote). Knowledge of these states may be valuable to an adversary to determine if they are able to reprogram the PLC. Operating modes and the mechanisms by which they are selected often vary by vendor and product line. Some commonly implemented operating modes are described below:", "technique_url": "https://attack.mitre.org/techniques/T0868"}, {"technique_id": "T0877", "technique_name": "I/O Image", "technique_description": "Adversaries may seek to capture process values related to the inputs and outputs of a PLC. During the scan cycle, a PLC reads the status of all inputs and stores them in an image table.  The image table is the PLCs internal storage location where values of inputs/outputs for one scan are stored while it executes the user program. After the PLC has solved the entire logic program, it updates the output image table. The contents of this output image table are written to the corresponding output points in I/O Modules.", "technique_url": "https://attack.mitre.org/techniques/T0877"}, {"technique_id": "T0801", "technique_name": "Monitor Process State", "technique_description": "Adversaries may gather information about the physical process state. This information may be used to gain more information about the process itself or used as a trigger for malicious actions. The sources of process state information may vary such as, OPC tags, historian data, specific PLC block information, or network traffic.", "technique_url": "https://attack.mitre.org/techniques/T0801"}, {"technique_id": "T0861", "technique_name": "Point & Tag Identification", "technique_description": "Adversaries may collect point and tag values to gain a more comprehensive understanding of the process environment. Points may be values such as inputs, memory locations, outputs or other process specific variables.  Tags are the identifiers given to points for operator convenience.", "technique_url": "https://attack.mitre.org/techniques/T0861"}, {"technique_id": "T0845", "technique_name": "Program Upload", "technique_description": "Adversaries may attempt to upload a program from a PLC to gather information about an industrial process. Uploading a program may allow them to acquire and study the underlying logic. Methods of program upload include vendor software, which enables the user to upload and read a program running on a PLC. This software can be used to upload the target program to a workstation, jump box, or an interfacing device.", "technique_url": "https://attack.mitre.org/techniques/T0845"}, {"technique_id": "T0852", "technique_name": "Screen Capture", "technique_description": "Adversaries may attempt to perform screen capture of devices in the control system environment. Screenshots may be taken of workstations, HMIs, or other devices that display environment-relevant process, device, reporting, alarm, or related data. These device displays may reveal information regarding the ICS process, layout, control, and related schematics. In particular, an HMI can provide a lot of important industrial process information.  Analysis of screen captures may provide the adversary with an understanding of intended operations and interactions between critical devices.", "technique_url": "https://attack.mitre.org/techniques/T0852"}, {"technique_id": "T0887", "technique_name": "Wireless Sniffing", "technique_description": "Adversaries may seek to capture radio frequency (RF) communication used for remote control and reporting in distributed environments. RF communication frequencies vary between 3 kHz to 300 GHz, although are commonly between 300 MHz to 6 GHz.   The wavelength and frequency of the signal affect how the signal propagates through open air, obstacles (e.g. walls and trees) and the type of radio required to capture them. These characteristics are often standardized in the protocol and hardware and may have an effect on how the signal is captured. Some examples of wireless protocols that may be found in cyber-physical environments are: WirelessHART, Zigbee, WIA-FA, and 700 MHz Public Safety Spectrum.", "technique_url": "https://attack.mitre.org/techniques/T0887"}]},
{"id": "TA0111", "name": "Privilege Escalation", "description": "The adversary is trying to gain higher-level permissions.", "url": "https://attack.mitre.org/tactics/TA0111", "techniques": [{"technique_id": "T0890", "technique_name": "Exploitation for Privilege Escalation", "technique_description": "Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.", "technique_url": "https://attack.mitre.org/techniques/T0890"}, {"technique_id": "T0874", "technique_name": "Hooking", "technique_description": "Adversaries may hook into application programming interface (API) functions used by processes to redirect calls for execution and privilege escalation means. Windows processes often leverage these API functions to perform tasks that require reusable system resources. Windows API functions are typically stored in dynamic-link libraries (DLLs) as exported functions.", "technique_url": "https://attack.mitre.org/techniques/T0874"}]},
{"id": "TA0110", "name": "Persistence", "description": "The adversary is trying to maintain their foothold in your ICS environment.", "url": "https://attack.mitre.org/tactics/TA0110", "techniques": [{"technique_id": "T0891", "technique_name": "Hardcoded Credentials", "technique_description": "Adversaries may leverage credentials that are hardcoded in software or firmware to gain an unauthorized interactive user session to an asset. Examples credentials that may be hardcoded in an asset include:", "technique_url": "https://attack.mitre.org/techniques/T0891"}, {"technique_id": "T0889", "technique_name": "Modify Program", "technique_description": "Adversaries may modify or add a program on a controller to affect how it interacts with the physical process, peripheral devices and other hosts on the network. Modification to controller programs can be accomplished using a Program Download in addition to other types of program modification such as online edit and program append.", "technique_url": "https://attack.mitre.org/techniques/T0889"}, {"technique_id": "T0839", "technique_name": "Module Firmware", "technique_description": "Adversaries may install malicious or vulnerable firmware onto modular hardware devices. Control system devices often contain modular hardware devices. These devices may have their own set of firmware that is separate from the firmware of the main control system equipment.", "technique_url": "https://attack.mitre.org/techniques/T0839"}, {"technique_id": "T0873", "technique_name": "Project File Infection", "technique_description": "Adversaries may attempt to infect project files with malicious code. These project files may consist of objects, program organization units, variables such as tags, documentation, and other configurations needed for PLC programs to function.  Using built in functions of the engineering software, adversaries may be able to download an infected program to a PLC in the operating environment enabling further", "technique_url": "https://attack.mitre.org/techniques/T0873"}, {"technique_id": "T0857", "technique_name": "System Firmware", "technique_description": "System firmware on modern assets is often designed with an update feature. Older device firmware may be factory installed and require special reprograming equipment. When available, the firmware update feature enables vendors to remotely patch bugs and perform upgrades. Device firmware updates are often delegated to the user and may be done using a software update package. It may also be possible to perform this task over the network.", "technique_url": "https://attack.mitre.org/techniques/T0857"}, {"technique_id": "T0859", "technique_name": "Valid Accounts", "technique_description": "Adversaries may steal the credentials of a specific user or service account using credential access techniques. In some cases, default credentials for control system devices may be publicly available. Compromised credentials may be used to bypass access controls placed on various resources on hosts and within the network, and may even be used for persistent access to remote systems. Compromised and default credentials may also grant an adversary increased privilege to specific systems and devices or access to restricted areas of the network. Adversaries may choose not to use malware or tools, in conjunction with the legitimate access those credentials provide, to make it harder to detect their presence or to control devices and send legitimate commands in an unintended way.", "technique_url": "https://attack.mitre.org/techniques/T0859"}]},
{"id": "TA0104", "name": "Execution", "description": "The adversary is trying to run code or manipulate system functions, parameters, and data in an unauthorized way.", "url": "https://attack.mitre.org/tactics/TA0104", "techniques": [{"technique_id": "T0895", "technique_name": "Autorun Image", "technique_description": "Adversaries may leverage AutoRun functionality or scripts to execute malicious code. Devices configured to enable AutoRun functionality or legacy operating systems may be susceptible to abuse of these features to run malicious code stored on various forms of removeable media (i.e., USB, Disk Images [.ISO]). Commonly, AutoRun or AutoPlay are disabled in many operating systems configurations to mitigate against this technique. If a device is configured to enable AutoRun or AutoPlay, adversaries may execute code on the device by mounting the removable media to the device, either through physical or virtual means. This may be especially relevant for virtual machine environments where disk images may be dynamically mapped to a guest system on a hypervisor.", "technique_url": "https://attack.mitre.org/techniques/T0895"}, {"technique_id": "T0858", "technique_name": "Change Operating Mode", "technique_description": "Adversaries may change the operating mode of a controller to gain additional access to engineering functions such as Program Download.   Programmable controllers typically have several modes of operation that control the state of the user program and control access to the controllers API. Operating modes can be physically selected using a key switch on the face of the controller but may also be selected with calls to the controllers API. Operating modes and the mechanisms by which they are selected often vary by vendor and product line. Some commonly implemented operating modes are described below:", "technique_url": "https://attack.mitre.org/techniques/T0858"}, {"technique_id": "T0807", "technique_name": "Command-Line Interface", "technique_description": "Adversaries may utilize command-line interfaces (CLIs) to interact with systems and execute commands. CLIs provide a means of interacting with computer systems and are a common feature across many types of platforms and devices within control systems environments.  Adversaries may also use CLIs to install and run new software, including malicious tools that may be installed over the course of an operation.", "technique_url": "https://attack.mitre.org/techniques/T0807"}, {"technique_id": "T0871", "technique_name": "Execution through API", "technique_description": "Adversaries may attempt to leverage Application Program Interfaces (APIs) used for communication between control software and the hardware. Specific functionality is often coded into APIs which can be called by software to engage specific functions on a device or other software.", "technique_url": "https://attack.mitre.org/techniques/T0871"}, {"technique_id": "T0823", "technique_name": "Graphical User Interface", "technique_description": "Adversaries may attempt to gain access to a machine via a Graphical User Interface (GUI) to enhance execution capabilities. Access to a GUI allows a user to interact with a computer in a more visual manner than a CLI. A GUI allows users to move a cursor and click on interface objects, with a mouse and keyboard as the main input devices, as opposed to just using the keyboard.", "technique_url": "https://attack.mitre.org/techniques/T0823"}, {"technique_id": "T0874", "technique_name": "Hooking", "technique_description": "Adversaries may hook into application programming interface (API) functions used by processes to redirect calls for execution and privilege escalation means. Windows processes often leverage these API functions to perform tasks that require reusable system resources. Windows API functions are typically stored in dynamic-link libraries (DLLs) as exported functions.", "technique_url": "https://attack.mitre.org/techniques/T0874"}, {"technique_id": "T0821", "technique_name": "Modify Controller Tasking", "technique_description": "Adversaries may modify the tasking of a controller to allow for the execution of their own programs. This can allow an adversary to manipulate the execution flow and behavior of a controller.", "technique_url": "https://attack.mitre.org/techniques/T0821"}, {"technique_id": "T0834", "technique_name": "Native API", "technique_description": "Adversaries may directly interact with the native OS application programming interface (API) to access system functions. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes.  These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.", "technique_url": "https://attack.mitre.org/techniques/T0834"}, {"technique_id": "T0853", "technique_name": "Scripting", "technique_description": "Adversaries may use scripting languages to execute arbitrary code in the form of a pre-written script or in the form of user-supplied code to an interpreter. Scripting languages are programming languages that differ from compiled languages, in that scripting languages use an interpreter, instead of a compiler. These interpreters read and compile part of the source code just before it is executed, as opposed to compilers, which compile each and every line of code to an executable file. Scripting allows software developers to run their code on any system where the interpreter exists. This way, they can distribute one package, instead of precompiling executables for many different systems. Scripting languages, such as Python, have their interpreters shipped as a default with many Linux distributions.", "technique_url": "https://attack.mitre.org/techniques/T0853"}, {"technique_id": "T0863", "technique_name": "User Execution", "technique_description": "Adversaries may rely on a targeted organizations user interaction for the execution of malicious code. User interaction may consist of installing applications, opening email attachments, or granting higher permissions to documents.", "technique_url": "https://attack.mitre.org/techniques/T0863"}]},
{"id": "TA0108", "name": "Initial Access", "description": "The adversary is trying to get into your ICS environment.", "url": "https://attack.mitre.org/tactics/TA0108", "techniques": [{"technique_id": "T0817", "technique_name": "Drive-by Compromise", "technique_description": "Adversaries may gain access to a system during a drive-by compromise, when a user visits a website as part of a regular browsing session. With this technique, the user's web browser is targeted and exploited simply by visiting the compromised website.", "technique_url": "https://attack.mitre.org/techniques/T0817"}, {"technique_id": "T0819", "technique_name": "Exploit Public-Facing Application", "technique_description": "Adversaries may leverage weaknesses to exploit internet-facing software for initial access into an industrial network. Internet-facing software may be user applications, underlying networking implementations, an assets operating system, weak defenses, etc. Targets of this technique may be intentionally exposed for the purpose of remote management and visibility.", "technique_url": "https://attack.mitre.org/techniques/T0819"}, {"technique_id": "T0866", "technique_name": "Exploitation of Remote Services", "technique_description": "Adversaries may exploit a software vulnerability to take advantage of a programming error in a program, service, or within the operating system software or kernel itself to enable remote service abuse. A common goal for post-compromise exploitation of remote services is for initial access into and lateral movement throughout the ICS environment to enable access to targeted systems.", "technique_url": "https://attack.mitre.org/techniques/T0866"}, {"technique_id": "T0822", "technique_name": "External Remote Services", "technique_description": "Adversaries may leverage external remote services as a point of initial access into your network. These services allow users to connect to internal network resources from external locations. Examples are VPNs, Citrix, and other access mechanisms. Remote service gateways often manage connections and credential authentication for these services.", "technique_url": "https://attack.mitre.org/techniques/T0822"}, {"technique_id": "T0883", "technique_name": "Internet Accessible Device", "technique_description": "Adversaries may gain access into industrial environments through systems exposed directly to the internet for remote access rather than through", "technique_url": "https://attack.mitre.org/techniques/T0883"}, {"technique_id": "T0886", "technique_name": "Remote Services", "technique_description": "Adversaries may leverage remote services to move between assets and network segments. These services are often used to allow operators to interact with systems remotely within the network, some examples are RDP, SMB, SSH, and other similar mechanisms.", "technique_url": "https://attack.mitre.org/techniques/T0886"}, {"technique_id": "T0847", "technique_name": "Replication Through Removable Media", "technique_description": "Adversaries may move onto systems, such as those separated from the enterprise network, by copying malware to removable media which is inserted into the control systems environment. The adversary may rely on unknowing trusted third parties, such as suppliers or contractors with access privileges, to introduce the removable media. This technique enables initial access to target devices that never connect to untrusted networks, but are physically accessible.", "technique_url": "https://attack.mitre.org/techniques/T0847"}, {"technique_id": "T0848", "technique_name": "Rogue Master", "technique_description": "Adversaries may setup a rogue master to leverage control server functions to communicate with outstations. A rogue master can be used to send legitimate control messages to other control system devices, affecting processes in unintended ways. It may also be used to disrupt network communications by capturing and receiving the network traffic meant for the actual master. Impersonating a master may also allow an adversary to avoid detection.", "technique_url": "https://attack.mitre.org/techniques/T0848"}, {"technique_id": "T0865", "technique_name": "Spearphishing Attachment", "technique_description": "Adversaries may use a spearphishing attachment, a variant of spearphishing, as a form of a social engineering attack against specific targets. Spearphishing attachments are different from other forms of spearphishing in that they employ malware attached to an email. All forms of spearphishing are electronically delivered and target a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon", "technique_url": "https://attack.mitre.org/techniques/T0865"}, {"technique_id": "T0862", "technique_name": "Supply Chain Compromise", "technique_description": "Adversaries may perform supply chain compromise to gain control systems environment access by means of infected products, software, and workflows. Supply chain compromise is the manipulation of products, such as devices or software, or their delivery mechanisms before receipt by the end consumer. Adversary compromise of these products and mechanisms is done for the goal of data or system compromise, once infected products are introduced to the target environment.", "technique_url": "https://attack.mitre.org/techniques/T0862"}, {"technique_id": "T0864", "technique_name": "Transient Cyber Asset", "technique_description": "Adversaries may target devices that are transient across ICS networks and external networks. Normally, transient assets are brought into an environment by authorized personnel and do not remain in that environment on a permanent basis.  Transient assets are commonly needed to support management functions and may be more common in systems where a remotely managed asset is not feasible, external connections for remote access do not exist, or 3rd party contractor/vendor access is required.", "technique_url": "https://attack.mitre.org/techniques/T0864"}, {"technique_id": "T0860", "technique_name": "Wireless Compromise", "technique_description": "Adversaries may perform wireless compromise as a method of gaining communications and unauthorized access to a wireless network. Access to a wireless network may be gained through the compromise of a wireless device.   Adversaries may also utilize radios and other wireless communication devices on the same frequency as the wireless network. Wireless compromise can be done as an initial access vector from a remote distance.", "technique_url": "https://attack.mitre.org/techniques/T0860"}]},
{"technique_id": "T0857", "technique_name": "System Firmware", "technique_description": "System firmware on modern assets is often designed with an update feature. Older device firmware may be factory installed and require special reprograming equipment. When available, the firmware update feature enables vendors to remotely patch bugs and perform upgrades. Device firmware updates are often delegated to the user and may be done using a software update package. It may also be possible to perform this task over the network.", "technique_url": "https://attack.mitre.org/techniques/T0857", "procedure_examples": [{"procedure_id": "C0028", "procedure_name": "2015 Ukraine Electric Power Attack", "procedure_description": "During the"}, {"procedure_id": "S1009", "procedure_name": "Triton", "procedure_description": "is able to read, write and execute code in memory on the safety controller at an arbitrary address within the devices firmware region. This allows the malware to make changes to the running firmware in memory and  modify how the device operates."}, {"procedure_id": "M0801", "procedure_name": "Access Management", "procedure_description": "All devices or systems changes, including all administrative functions, should require authentication. Consider using access management technologies to enforce authorization on all management interface access attempts, especially when the device does not inherently provide strong authentication and authorization functions."}, {"procedure_id": "M0947", "procedure_name": "Audit", "procedure_description": "Perform integrity checks of firmware before uploading it on a device. Utilize cryptographic hashes to verify the firmware has not been tampered with by comparing it to a trusted hash of the firmware. This could be from trusted data sources (e.g., vendor site) or through a third-party verification service."}, {"procedure_id": "M0946", "procedure_name": "Boot Integrity", "procedure_description": "Check the integrity of the existing BIOS or EFI to determine if it is vulnerable to modification. Use Trusted Platform Module technology."}, {"procedure_id": "M0945", "procedure_name": "Code Signing", "procedure_description": "Devices should verify that firmware has been properly signed by the vendor before allowing installation."}, {"procedure_id": "M0802", "procedure_name": "Communication Authenticity", "procedure_description": "Protocols used for device management should authenticate all network messages to prevent unauthorized system changes."}, {"procedure_id": "M0808", "procedure_name": "Encrypt Network Traffic", "procedure_description": "The encryption of firmware should be considered to prevent adversaries from identifying possible vulnerabilities within the firmware."}, {"procedure_id": "M0941", "procedure_name": "Encrypt Sensitive Information", "procedure_description": "The encryption of firmware should be considered to prevent adversaries from identifying possible vulnerabilities within the firmware."}, {"procedure_id": "M0937", "procedure_name": "Filter Network Traffic", "procedure_description": "Filter for protocols and payloads associated with firmware activation or updating activity."}, {"procedure_id": "M0804", "procedure_name": "Human User Authentication", "procedure_description": "Devices that allow remote management of firmware should require authentication before allowing any changes. The authentication mechanisms should also support"}, {"procedure_id": "M0807", "procedure_name": "Network Allowlists", "procedure_description": "Use host-based allowlists to prevent devices from accepting connections from unauthorized systems. For example, allowlists can be used to ensure devices can only connect with master stations or known management/engineering workstations."}, {"procedure_id": "M0930", "procedure_name": "Network Segmentation", "procedure_description": "Segment operational network and systems to restrict access to critical system functions to predetermined management systems."}, {"procedure_id": "M0813", "procedure_name": "Software Process and Device Authentication", "procedure_description": "Authenticate connections fromsoftware and devices to prevent unauthorized systems from accessing protected management functions."}, {"procedure_id": "M0951", "procedure_name": "Update Software", "procedure_description": "Patch the BIOS and EFI as necessary."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}, {"procedure_id": "DS0001", "procedure_name": "Firmware", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "DS0040", "procedure_name": "Operational Databases", "procedure_description": ""}]},
{"technique_id": "T0838", "technique_name": "Modify Alarm Settings", "technique_description": "Adversaries may modify alarm settings to prevent alerts that may inform operators of their presence or to prevent responses to dangerous and unintended scenarios. Reporting messages are a standard part of data acquisition in control systems. Reporting messages are used as a way to transmit system state information and acknowledgements that specific actions have occurred. These messages provide vital information for the management of a physical process, and keep operators, engineers, and administrators aware of the state of system devices and physical processes.", "technique_url": "https://attack.mitre.org/techniques/T0838", "procedure_examples": [{"procedure_id": "C0020", "procedure_name": "Maroochy Water Breach", "procedure_description": "In the"}, {"procedure_id": "M0801", "procedure_name": "Access Management", "procedure_description": "All devices or systems changes, including all administrative functions, should require authentication. Consider using access management technologies to enforce authorization on all management interface access attempts, especially when the device does not inherently provide strong authentication and authorization functions."}, {"procedure_id": "M0800", "procedure_name": "Authorization Enforcement", "procedure_description": "Only authorized personnel should be able to change settings for alarms."}, {"procedure_id": "M0804", "procedure_name": "Human User Authentication", "procedure_description": "All field controllers should require users to authenticate for all remote or local management sessions. The authentication mechanisms should also support"}, {"procedure_id": "M0807", "procedure_name": "Network Allowlists", "procedure_description": "Use host-based allowlists to prevent devices from accepting connections from unauthorized systems. For example, allowlists can be used to ensure devices can only connect with master stations or known management/engineering workstations."}, {"procedure_id": "M0930", "procedure_name": "Network Segmentation", "procedure_description": "Segment operational network and systems to restrict access to critical system functions to predetermined management systems."}, {"procedure_id": "M0813", "procedure_name": "Software Process and Device Authentication", "procedure_description": "Authenticate connections fromsoftware and devices to prevent unauthorized systems from accessing protected management functions."}, {"procedure_id": "M0918", "procedure_name": "User Account Management", "procedure_description": "Limit privileges of user accounts and groups so that only designated administrators or engineers can interact with alarm management and alarm configuration thresholds."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}, {"procedure_id": "DS0039", "procedure_name": "Asset", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "DS0040", "procedure_name": "Operational Databases", "procedure_description": ""}]},
{"technique_id": "T0881", "technique_name": "Service Stop", "technique_description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.   Services may not allow for modification of their data stores while running. Adversaries may stop services in order to conduct Data Destruction.", "technique_url": "https://attack.mitre.org/techniques/T0881", "procedure_examples": [{"procedure_id": "S0605", "procedure_name": "EKANS", "procedure_description": "Before encrypting the process,"}, {"procedure_id": "S0604", "procedure_name": "Industroyer", "procedure_description": "has the capability to stop a service itself, or to login as a user and stop a service as that user."}, {"procedure_id": "S1072", "procedure_name": "Industroyer2", "procedure_description": "has the capability to terminate specified processes (i.e., PServiceControl.exe and PService_PDD.exe) and rename each process to prevent restart. These are defined through a hardcoded configuration."}, {"procedure_id": "S0607", "procedure_name": "KillDisk", "procedure_description": "looks for and terminates two non-standard processes, one of which is an ICS application."}, {"procedure_id": "S0496", "procedure_name": "REvil", "procedure_description": "searches for all processes listed in the prc field within its configuration file and then terminates each process."}, {"procedure_id": "M0930", "procedure_name": "Network Segmentation", "procedure_description": "Segment operational network and systems to restrict access to critical system functions to predetermined management systems."}, {"procedure_id": "M0922", "procedure_name": "Restrict File and Directory Permissions", "procedure_description": "Ensure proper process and file permissions are in place to inhibit adversaries from disabling or interfering with critical services."}, {"procedure_id": "M0924", "procedure_name": "Restrict Registry Permissions", "procedure_description": "Ensure proper registry permissions are in place to inhibit adversaries from disabling or interfering with critical services."}, {"procedure_id": "M0918", "procedure_name": "User Account Management", "procedure_description": "Limit privileges of user accounts and groups so that only authorized administrators can change service states and configurations."}, {"procedure_id": "DS0017", "procedure_name": "Command", "procedure_description": ""}, {"procedure_id": "DS0022", "procedure_name": "File", "procedure_description": ""}, {"procedure_id": "DS0009", "procedure_name": "Process", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}, {"procedure_id": "DS0019", "procedure_name": "Service", "procedure_description": ""}, {"procedure_id": "DS0024", "procedure_name": "Windows Registry", "procedure_description": ""}]},
{"technique_id": "T0851", "technique_name": "Rootkit", "technique_description": "Adversaries may deploy rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting and modifying operating-system API calls that supply system information. Rootkits or rootkit-enabling functionality may reside at the user or kernel level in the operating system, or lower.", "technique_url": "https://attack.mitre.org/techniques/T0851", "procedure_examples": [{"procedure_id": "S0603", "procedure_name": "Stuxnet", "procedure_description": "One of"}, {"procedure_id": "M0947", "procedure_name": "Audit", "procedure_description": "Audit the integrity of PLC system and application code functionality, such as the manipulation of standard function blocks (e.g., Organizational Blocks) that manage the execution of application logic programs."}, {"procedure_id": "M0945", "procedure_name": "Code Signing", "procedure_description": "Digital signatures may be used to ensure application DLLs are authentic prior to execution."}, {"procedure_id": "DS0001", "procedure_name": "Firmware", "procedure_description": ""}]},
{"technique_id": "T0814", "technique_name": "Denial of Service", "technique_description": "Adversaries may perform Denial-of-Service (DoS) attacks to disrupt expected device functionality. Examples of DoS attacks include overwhelming the target device with a high volume of requests in a short time period and sending the target device a request it does not know how to handle. Disrupting device state may temporarily render it unresponsive, possibly lasting until a reboot can occur. When placed in this state, devices may be unable to send and receive requests, and may not perform expected response functions in reaction to other events in the environment.", "technique_url": "https://attack.mitre.org/techniques/T0814", "procedure_examples": [{"procedure_id": "C0028", "procedure_name": "2015 Ukraine Electric Power Attack", "procedure_description": "During the"}, {"procedure_id": "S0093", "procedure_name": "Backdoor.Oldrea", "procedure_description": "The"}, {"procedure_id": "S0604", "procedure_name": "Industroyer", "procedure_description": "The"}, {"procedure_id": "S1006", "procedure_name": "PLC-Blaster", "procedure_description": "The execution on the PLC can be stopped by violating the cycle time limit. The"}, {"procedure_id": "C0031", "procedure_name": "Unitronics Defacement Campaign", "procedure_description": "During the"}, {"procedure_id": "M0815", "procedure_name": "Watchdog Timers", "procedure_description": "System and process restarts should be performed when a timeout condition occurs."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}, {"procedure_id": "DS0040", "procedure_name": "Operational Databases", "procedure_description": ""}]},
{"technique_id": "T0887", "technique_name": "Wireless Sniffing", "technique_description": "Adversaries may seek to capture radio frequency (RF) communication used for remote control and reporting in distributed environments. RF communication frequencies vary between 3 kHz to 300 GHz, although are commonly between 300 MHz to 6 GHz.   The wavelength and frequency of the signal affect how the signal propagates through open air, obstacles (e.g. walls and trees) and the type of radio required to capture them. These characteristics are often standardized in the protocol and hardware and may have an effect on how the signal is captured. Some examples of wireless protocols that may be found in cyber-physical environments are: WirelessHART, Zigbee, WIA-FA, and 700 MHz Public Safety Spectrum.", "technique_url": "https://attack.mitre.org/techniques/T0887", "procedure_examples": [{"procedure_id": "M0808", "procedure_name": "Encrypt Network Traffic", "procedure_description": "Utilize strong cryptographic techniques and protocols to prevent eavesdropping on network communications."}, {"procedure_id": "M0806", "procedure_name": "Minimize Wireless Signal Propagation", "procedure_description": "Reduce the range of RF communications to their intended operating range when possible. Propagation reduction methods may include (i) reducing transmission power on wireless signals, (ii) adjusting antenna gain to prevent extensions beyond organizational boundaries, and (iii) employing RF shielding techniques to block excessive signal propagation."}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}]},
{"technique_id": "T0888", "technique_name": "Remote System Information Discovery", "technique_description": "An adversary may attempt to get detailed information about remote systems and their peripherals, such as make/model, role, and configuration. Adversaries may use information from Remote System Information Discovery to aid in targeting and shaping follow-on behaviors. For example, the system's operational role and model information can dictate whether it is a relevant target for the adversary's operational objectives. In addition, the system's configuration may be used to scope subsequent technique usage.", "technique_url": "https://attack.mitre.org/techniques/T0888", "procedure_examples": [{"procedure_id": "S0093", "procedure_name": "Backdoor.Oldrea", "procedure_description": "The"}, {"procedure_id": "S1045", "procedure_name": "INCONTROLLER", "procedure_description": "includes a library that creates Modbus connections with a device to request its device ID."}, {"procedure_id": "S0604", "procedure_name": "Industroyer", "procedure_description": "The"}, {"procedure_id": "S1072", "procedure_name": "Industroyer2", "procedure_description": "has the capability to poll a target device about its connection status, data transfer status, Common Address (CA), Information Object Addresses (IOAs), and IO state values across multiple priority levels."}, {"procedure_id": "S0603", "procedure_name": "Stuxnet", "procedure_description": "enumerates and parses the System Data Blocks (SDB) using the s7blk_findfirst and s7blk_findnext API calls in s7otbxdx.dll. Stuxnet must find an SDB with the DWORD at offset 50h equal to 0100CB2Ch. This specifies that the system uses the Profibus communications processor module CP 342-5. In addition, specific values are searched for and counted: 7050h and 9500h. 7050h is assigned to part number KFC750V3 which appears to be a frequency converter drive (also known as variable frequency drive) manufactured by Fararo Paya in Teheran, Iran. 9500h is assigned to Vacon NX frequency converter drives manufactured by Vacon based in Finland."}, {"procedure_id": "M0814", "procedure_name": "Static Network Configuration", "procedure_description": "ICS environments typically have more statically defined devices, therefore minimize the use of both IT discovery protocols (e.g., DHCP, LLDP) and discovery functions in automation protocols."}, {"procedure_id": "DS0022", "procedure_name": "File", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}, {"procedure_id": "DS0009", "procedure_name": "Process", "procedure_description": ""}]},
{"technique_id": "T0855", "technique_name": "Unauthorized Command Message", "technique_description": "Adversaries may send unauthorized command messages to instruct control system assets to perform actions outside of their intended functionality, or without the logical preconditions to trigger their expected function. Command messages are used in ICS networks to give direct instructions to control systems devices. If an adversary can send an unauthorized command message to a control system, then it can instruct the control systems device to perform an action outside the normal bounds of the device's actions. An adversary could potentially instruct a control systems device to perform an action that will cause an", "technique_url": "https://attack.mitre.org/techniques/T0855", "procedure_examples": [{"procedure_id": "C0028", "procedure_name": "2015 Ukraine Electric Power Attack", "procedure_description": "During the"}, {"procedure_id": "C0034", "procedure_name": "2022 Ukraine Electric Power Attack", "procedure_description": "During the"}, {"procedure_id": "S1045", "procedure_name": "INCONTROLLER", "procedure_description": "can send custom Modbus commands to write register values on Schneider PLCs."}, {"procedure_id": "S0604", "procedure_name": "Industroyer", "procedure_description": "Using its protocol payloads,"}, {"procedure_id": "S1072", "procedure_name": "Industroyer2", "procedure_description": "is capable of sending command messages from the compromised device to target remote stations to open data channels, retrieve the location and values of Information Object Addresses (IOAs), and modify the IO state values through Select Before Operate I/O, Select/Execute, and Invert Default State operations."}, {"procedure_id": "C0020", "procedure_name": "Maroochy Water Breach", "procedure_description": "In the"}, {"procedure_id": "C0030", "procedure_name": "Triton Safety Instrumented System Attack", "procedure_description": "In the"}, {"procedure_id": "M0802", "procedure_name": "Communication Authenticity", "procedure_description": "Protocols used for control functions should provide authenticity through MAC functions or digital signatures. If not, utilize bump-in-the-wire devices or VPNs to enforce communication authenticity between devices that are not capable of supporting this (e.g., legacy controllers, RTUs)."}, {"procedure_id": "M0937", "procedure_name": "Filter Network Traffic", "procedure_description": "Perform inline allowlisting of automation protocol commands  to prevent devices from sending unauthorized command or reporting messages. Allow/denylist techniques need to be designed with sufficient accuracy to prevent the unintended blocking of valid messages."}, {"procedure_id": "M0807", "procedure_name": "Network Allowlists", "procedure_description": "Use host-based allowlists to prevent devices from accepting connections from unauthorized systems. For example, allowlists can be used to ensure devices can only connect with master stations or known management/engineering workstations."}, {"procedure_id": "M0930", "procedure_name": "Network Segmentation", "procedure_description": "Segment operational assets and their management devices based on their functional role within the process. Enabling more strict isolation to more critical control and operational information within the control environment."}, {"procedure_id": "M0813", "procedure_name": "Software Process and Device Authentication", "procedure_description": "Devices should authenticate all messages between master and outstation assets."}, {"procedure_id": "M0818", "procedure_name": "Validate Program Inputs", "procedure_description": "Devices and programs that receive command messages from remote systems (e.g., control servers) should verify those commands before taking any actions on them."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}, {"procedure_id": "DS0040", "procedure_name": "Operational Databases", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}]},
{"technique_id": "T0835", "technique_name": "Manipulate I/O Image", "technique_description": "Adversaries may manipulate the I/O image of PLCs through various means to prevent them from functioning as expected. Methods of I/O image manipulation may include overriding the I/O table via direct memory manipulation or using the override function used for testing PLC programs.  During the scan cycle, a PLC reads the status of all inputs and stores them in an image table.  The image table is the PLCs internal storage location where values of inputs/outputs for one scan are stored while it executes the user program. After the PLC has solved the entire logic program, it updates the output image table. The contents of this output image table are written to the corresponding output points in I/O Modules.", "technique_url": "https://attack.mitre.org/techniques/T0835", "procedure_examples": [{"procedure_id": "S1006", "procedure_name": "PLC-Blaster", "procedure_description": "may manipulate any outputs of the PLC. Using the POU POKE any value within the process image may be modified."}, {"procedure_id": "S0603", "procedure_name": "Stuxnet", "procedure_description": "When the peripheral output is written to, sequence C intercepts the output and ensures it is not written to the process image output. The output is the instructions the PLC sends to a device to change its operating behavior. By intercepting the peripheral output,"}, {"procedure_id": "M0816", "procedure_name": "Mitigation Limited or Not Effective", "procedure_description": "This technique may not be effectively mitigated against, consider controls for assets and processes that lead to the use of this technique."}, {"procedure_id": "DS0039", "procedure_name": "Asset", "procedure_description": ""}]},
{"technique_id": "T0816", "technique_name": "Device Restart/Shutdown", "technique_description": "Adversaries may forcibly restart or shutdown a device in an ICS environment to disrupt and potentially negatively impact physical processes. Methods of device restart and shutdown exist in some devices as built-in, standard functionalities. These functionalities can be executed using interactive device web interfaces, CLIs, and network protocol commands.", "technique_url": "https://attack.mitre.org/techniques/T0816", "procedure_examples": [{"procedure_id": "C0028", "procedure_name": "2015 Ukraine Electric Power Attack", "procedure_description": "During the"}, {"procedure_id": "S0604", "procedure_name": "Industroyer", "procedure_description": "The"}, {"procedure_id": "M0801", "procedure_name": "Access Management", "procedure_description": "All devices or systems changes, including all administrative functions, should require authentication. Consider using access management technologies to enforce authorization on all management interface access attempts, especially when the device does not inherently provide strong authentication and authorization functions."}, {"procedure_id": "M0800", "procedure_name": "Authorization Enforcement", "procedure_description": "All field controllers should restrict the modification of programs to only certain users (e.g., engineers, field technician), preferably through implementing a role-based access mechanism."}, {"procedure_id": "M0802", "procedure_name": "Communication Authenticity", "procedure_description": "Protocols used for control functions should provide authenticity through MAC functions or digital signatures. If not, utilize bump-in-the-wire devices or VPNs to enforce communication authenticity between devices that are not capable of supporting this (e.g., legacy controllers, RTUs)."}, {"procedure_id": "M0942", "procedure_name": "Disable or Remove Feature or Program", "procedure_description": "Ensure remote commands that enable device shutdown are disabled if they are not necessary. Examples include DNP3's 0x0D function code or unnecessary device management functions."}, {"procedure_id": "M0937", "procedure_name": "Filter Network Traffic", "procedure_description": "Application denylists can be used to block automation protocol functions used to initiate device shutdowns or restarts, such as DNP3's 0x0D function code, or vulnerabilities that can be used to trigger device shutdowns (e.g., CVE-2014-9195, CVE-2015-5374)."}, {"procedure_id": "M0804", "procedure_name": "Human User Authentication", "procedure_description": "All field controllers should require users to authenticate for all remote or local management sessions. The authentication mechanisms should also support"}, {"procedure_id": "M0807", "procedure_name": "Network Allowlists", "procedure_description": "Use host-based allowlists to prevent devices from accepting connections from unauthorized systems. For example, allowlists can be used to ensure devices can only connect with master stations or known management/engineering workstations."}, {"procedure_id": "M0930", "procedure_name": "Network Segmentation", "procedure_description": "Segment operational network and systems to restrict access to critical system functions to predetermined management systems."}, {"procedure_id": "M0813", "procedure_name": "Software Process and Device Authentication", "procedure_description": "Authenticate connections from software and devices to prevent unauthorized systems from accessing protected management functions."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}, {"procedure_id": "DS0040", "procedure_name": "Operational Databases", "procedure_description": ""}]},
{"technique_id": "T0869", "technique_name": "Standard Application Layer Protocol", "technique_description": "Adversaries may establish command and control capabilities over commonly used application layer protocols such as HTTP(S), OPC, RDP, telnet, DNP3, and modbus. These protocols may be used to disguise adversary actions as benign network traffic. Standard protocols may be seen on their associated port or in some cases over a non-standard port.  Adversaries may use these protocols to reach out of the network for command and control, or in some cases to other infected devices within the network.", "technique_url": "https://attack.mitre.org/techniques/T0869", "procedure_examples": [{"procedure_id": "S0089", "procedure_name": "BlackEnergy", "procedure_description": "uses HTTP POST request to contact external command and control servers."}, {"procedure_id": "S1045", "procedure_name": "INCONTROLLER", "procedure_description": "can remotely send commands to a malicious agent uploaded on Omron PLCs over HTTP or HTTPS."}, {"procedure_id": "G0049", "procedure_name": "OilRig", "procedure_description": "communicated with its command and control using HTTP requests."}, {"procedure_id": "S0496", "procedure_name": "REvil", "procedure_description": "sends HTTPS POST messages with randomly generated URLs to communicate with a remote server."}, {"procedure_id": "S0603", "procedure_name": "Stuxnet", "procedure_description": "uses a thread to monitor a data block DB890 of sequence A or B. This thread is constantly running and probing this block (every 5 minutes). On an infected PLC, if block DB890 is found and contains a special magic value (used by Stuxnet to identify his own block DB890), this blocks data can be read and written. This thread is likely used to optimize the way sequences A and B work, and modify their behavior when the Step7 editor is opened."}, {"procedure_id": "S1009", "procedure_name": "Triton", "procedure_description": "can communicate with the implant utilizing the TriStation 'get main processor diagnostic data' command and looks for a specifically crafted packet body from which it extracts a command value and its arguments."}, {"procedure_id": "M0807", "procedure_name": "Network Allowlists", "procedure_description": "Network allowlists can be implemented through either host-based files or system host files to specify what external connections (e.g., IP address, MAC address, port, protocol) can be made from a device. Allowlist techniques that operate at the application layer (e.g., DNP3, Modbus, HTTP) are addressed in the"}, {"procedure_id": "M0931", "procedure_name": "Network Intrusion Prevention", "procedure_description": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level."}, {"procedure_id": "M0930", "procedure_name": "Network Segmentation", "procedure_description": "Ensure proper network segmentation between higher level corporate resources and the control process environment."}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}]},
{"technique_id": "T0846", "technique_name": "Remote System Discovery", "technique_description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for subsequent Lateral Movement or Discovery techniques. Functionality could exist within adversary tools to enable this, but utilities available on the operating system or vendor software could also be used.", "technique_url": "https://attack.mitre.org/techniques/T0846", "procedure_examples": [{"procedure_id": "C0028", "procedure_name": "2015 Ukraine Electric Power Attack", "procedure_description": "During the"}, {"procedure_id": "S0093", "procedure_name": "Backdoor.Oldrea", "procedure_description": "The"}, {"procedure_id": "S1045", "procedure_name": "INCONTROLLER", "procedure_description": "can perform a UDP multicast scan of UDP port 27127 to identify Schneider PLCs that use that port for the NetManage protocol."}, {"procedure_id": "S0604", "procedure_name": "Industroyer", "procedure_description": "The"}, {"procedure_id": "S1006", "procedure_name": "PLC-Blaster", "procedure_description": "scans the network to find other Siemens S7 PLC devices to infect. It locates these devices by checking for a service listening on TCP port 102."}, {"procedure_id": "S1009", "procedure_name": "Triton", "procedure_description": "uses a Python script that is capable of detecting Triconex controllers on the network by sending a specific UDP broadcast packet over port 1502."}, {"procedure_id": "M0814", "procedure_name": "Static Network Configuration", "procedure_description": "ICS environments typically have more statically defined devices, therefore minimize the use of both IT discovery protocols (e.g., DHCP, LLDP) and discovery functions in automation protocols."}, {"procedure_id": "DS0022", "procedure_name": "File", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}, {"procedure_id": "DS0009", "procedure_name": "Process", "procedure_description": ""}]},
{"technique_id": "T0845", "technique_name": "Program Upload", "technique_description": "Adversaries may attempt to upload a program from a PLC to gather information about an industrial process. Uploading a program may allow them to acquire and study the underlying logic. Methods of program upload include vendor software, which enables the user to upload and read a program running on a PLC. This software can be used to upload the target program to a workstation, jump box, or an interfacing device.", "technique_url": "https://attack.mitre.org/techniques/T0845", "procedure_examples": [{"procedure_id": "S1045", "procedure_name": "INCONTROLLER", "procedure_description": "can use the CODESYS protocol to upload programs from Schneider PLCs."}, {"procedure_id": "S1009", "procedure_name": "Triton", "procedure_description": "calls the SafeAppendProgramMod to transfer its payloads to the Tricon. Part of this call includes preforming a program upload."}, {"procedure_id": "M0801", "procedure_name": "Access Management", "procedure_description": "Authenticate all access to field controllers before authorizing access to, or modification of, a device's state, logic, or programs. Centralized authentication techniques can help manage the large number of field controller accounts needed across the ICS."}, {"procedure_id": "M0800", "procedure_name": "Authorization Enforcement", "procedure_description": "All field controllers should restrict program uploads to only certain users (e.g., engineers, field technician), preferably through implementing a role-based access mechanism."}, {"procedure_id": "M0802", "procedure_name": "Communication Authenticity", "procedure_description": "Protocols used for device management should authenticate all network messages to prevent unauthorized system changes."}, {"procedure_id": "M0937", "procedure_name": "Filter Network Traffic", "procedure_description": "Filter for protocols and payloads associated with program upload activity to prevent unauthorized access to device configurations."}, {"procedure_id": "M0804", "procedure_name": "Human User Authentication", "procedure_description": "All field controllers should require users to authenticate for all remote or local management sessions. The authentication mechanisms should also support"}, {"procedure_id": "M0807", "procedure_name": "Network Allowlists", "procedure_description": "Use host-based allowlists to prevent devices from accepting connections from unauthorized systems. For example, allowlists can be used to ensure devices can only connect with master stations or known management/engineering workstations."}, {"procedure_id": "M0930", "procedure_name": "Network Segmentation", "procedure_description": "Segment operational network and systems to restrict access to critical system functions to predetermined management systems."}, {"procedure_id": "M0813", "procedure_name": "Software Process and Device Authentication", "procedure_description": "Authenticate connections from software and devices to prevent unauthorized systems from accessing protected management functions."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}]},
{"technique_id": "T0852", "technique_name": "Screen Capture", "technique_description": "Adversaries may attempt to perform screen capture of devices in the control system environment. Screenshots may be taken of workstations, HMIs, or other devices that display environment-relevant process, device, reporting, alarm, or related data. These device displays may reveal information regarding the ICS process, layout, control, and related schematics. In particular, an HMI can provide a lot of important industrial process information.  Analysis of screen captures may provide the adversary with an understanding of intended operations and interactions between critical devices.", "technique_url": "https://attack.mitre.org/techniques/T0852", "procedure_examples": [{"procedure_id": "G1000", "procedure_name": "ALLANITE", "procedure_description": "has been identified to collect and distribute screenshots of ICS systems such as HMIs."}, {"procedure_id": "G0064", "procedure_name": "APT33", "procedure_description": "utilize backdoors capable of capturing screenshots once installed on a system."}, {"procedure_id": "M0816", "procedure_name": "Mitigation Limited or Not Effective", "procedure_description": "Preventing screen capture on a device may require disabling various system calls supported by the operating systems (e.g., Microsoft WindowsGraphicsCaputer APIs), however, these may be needed for other critical applications."}, {"procedure_id": "DS0017", "procedure_name": "Command", "procedure_description": ""}, {"procedure_id": "DS0009", "procedure_name": "Process", "procedure_description": ""}]},
{"technique_id": "T0809", "technique_name": "Data Destruction", "technique_description": "Adversaries may perform data destruction over the course of an operation. The adversary may drop or create malware, tools, or other non-native files on a target system to accomplish this, potentially leaving behind traces of malicious activities. Such non-native files and other data may be removed over the course of an intrusion to maintain a small footprint or as a standard part of the post-intrusion cleanup process.", "technique_url": "https://attack.mitre.org/techniques/T0809", "procedure_examples": [{"procedure_id": "S1045", "procedure_name": "INCONTROLLER", "procedure_description": "can wipe the memory of Omron PLCs and reset settings through the remote HTTP service."}, {"procedure_id": "S0604", "procedure_name": "Industroyer", "procedure_description": "has a destructive wiper that overwrites all ICS configuration files across the hard drives and all mapped network drives specifically targeting ABB PCM600 configuration files."}, {"procedure_id": "S0607", "procedure_name": "KillDisk", "procedure_description": "is able to delete system files to make the system unbootable and targets 35 different types of files for deletion."}, {"procedure_id": "M0953", "procedure_name": "Data Backup", "procedure_description": "Utilize central storage servers for critical operations where possible (e.g., historians) and keep remote backups. For outstations, use local redundant storage for event recorders. Have backup control system platforms, preferably as hot-standbys to respond immediately to data destruction events."}, {"procedure_id": "M0926", "procedure_name": "Privileged Account Management", "procedure_description": "Minimize permissions and access for service accounts to limit the information that may be impacted by malicious users or software."}, {"procedure_id": "M0922", "procedure_name": "Restrict File and Directory Permissions", "procedure_description": "Protect files stored locally with proper permissions  to limit opportunities for adversaries to impact data storage."}, {"procedure_id": "DS0017", "procedure_name": "Command", "procedure_description": ""}, {"procedure_id": "DS0022", "procedure_name": "File", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}, {"procedure_id": "DS0009", "procedure_name": "Process", "procedure_description": ""}]},
{"technique_id": "T0864", "technique_name": "Transient Cyber Asset", "technique_description": "Adversaries may target devices that are transient across ICS networks and external networks. Normally, transient assets are brought into an environment by authorized personnel and do not remain in that environment on a permanent basis.  Transient assets are commonly needed to support management functions and may be more common in systems where a remotely managed asset is not feasible, external connections for remote access do not exist, or 3rd party contractor/vendor access is required.", "technique_url": "https://attack.mitre.org/techniques/T0864", "procedure_examples": [{"procedure_id": "C0020", "procedure_name": "Maroochy Water Breach", "procedure_description": "In the"}, {"procedure_id": "M0949", "procedure_name": "Antivirus/Antimalware", "procedure_description": "Install anti-virus software on all workstation and transient assets that may have external access, such as to web, email, or remote file shares."}, {"procedure_id": "M0947", "procedure_name": "Audit", "procedure_description": "Integrity checking of transient assets can include performing the validation of the booted operating system and programs using TPM-based technologies, such as Secure Boot and Trusted Boot."}, {"procedure_id": "M0941", "procedure_name": "Encrypt Sensitive Information", "procedure_description": "Consider implementing full disk encryption, especially if engineering workstations are transient assets that are more likely to be lost, stolen, or tampered with."}, {"procedure_id": "M0930", "procedure_name": "Network Segmentation", "procedure_description": "Segment and control software movement between business and OT environments by way of one directional DMZs. Web access should be restricted from the OT environment. Engineering workstations, including transient cyber assets (TCAs) should have minimal connectivity to external networks, including Internet and email, further limit the extent to which these devices are dual-homed to multiple networks."}, {"procedure_id": "M0951", "procedure_name": "Update Software", "procedure_description": "Update software on control network assets when possible. If feasible, use modern operating systems and software to reduce exposure to known vulnerabilities."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}]},
{"technique_id": "T0860", "technique_name": "Wireless Compromise", "technique_description": "Adversaries may perform wireless compromise as a method of gaining communications and unauthorized access to a wireless network. Access to a wireless network may be gained through the compromise of a wireless device.   Adversaries may also utilize radios and other wireless communication devices on the same frequency as the wireless network. Wireless compromise can be done as an initial access vector from a remote distance.", "technique_url": "https://attack.mitre.org/techniques/T0860", "procedure_examples": [{"procedure_id": "C0020", "procedure_name": "Maroochy Water Breach", "procedure_description": "In the"}, {"procedure_id": "M0802", "procedure_name": "Communication Authenticity", "procedure_description": "Do not inherently rely on the authenticity provided by the network/link layer (e.g., 802.11, LTE, 802.15.4), as link layer equipment may have long lifespans and protocol vulnerabilities may not be easily patched. Provide defense-in-depth by implementing authenticity within the associated application-layer protocol, or through a network-layer VPN."}, {"procedure_id": "M0808", "procedure_name": "Encrypt Network Traffic", "procedure_description": "Utilize strong cryptographic techniques and protocols to prevent eavesdropping on network communications."}, {"procedure_id": "M0806", "procedure_name": "Minimize Wireless Signal Propagation", "procedure_description": "Techniques can include (i) reducing transmission power on wireless signals, (ii) adjusting antenna gain to prevent extensions beyond organizational boundaries, and (iii) employing RF shielding techniques to block excessive signal propagation."}, {"procedure_id": "M0813", "procedure_name": "Software Process and Device Authentication", "procedure_description": "Ensure wireless networks require the authentication of all devices, and that all wireless devices also authenticate network infrastructure devices (i.e., mutual authentication). For defense-in-depth purposes, utilize VPNs or ensure that application-layer protocols also authenticate the system or device. Use protocols that provide strong authentication (e.g., IEEE 802.1X), and enforce basic protections, such as MAC filtering, when stronger cryptographic techniques are not available."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}, {"procedure_id": "DS0028", "procedure_name": "Logon Session", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}]},
{"technique_id": "T0862", "technique_name": "Supply Chain Compromise", "technique_description": "Adversaries may perform supply chain compromise to gain control systems environment access by means of infected products, software, and workflows. Supply chain compromise is the manipulation of products, such as devices or software, or their delivery mechanisms before receipt by the end consumer. Adversary compromise of these products and mechanisms is done for the goal of data or system compromise, once infected products are introduced to the target environment.", "technique_url": "https://attack.mitre.org/techniques/T0862", "procedure_examples": [{"procedure_id": "S0093", "procedure_name": "Backdoor.Oldrea", "procedure_description": "The"}, {"procedure_id": "G0035", "procedure_name": "Dragonfly", "procedure_description": "trojanized legitimate ICS equipment providers software packages available for download on their websites."}, {"procedure_id": "G0088", "procedure_name": "TEMP.Veles", "procedure_description": "targeted several ICS vendors and manufacturers."}, {"procedure_id": "M0947", "procedure_name": "Audit", "procedure_description": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses. Perform periodic integrity checks of the device to validate the correctness of the firmware, software, programs, and configurations. Integrity checks, which typically include cryptographic hashes or digital signatures, should be compared to those obtained at known valid states, especially after events like device reboots, program downloads, or program restarts."}, {"procedure_id": "M0945", "procedure_name": "Code Signing", "procedure_description": "When available utilize hardware and software root-of-trust to verify the authenticity of a system. This may be achieved through cryptographic means, such as digital signatures or hashes, of critical software and firmware throughout the supply chain."}, {"procedure_id": "M0817", "procedure_name": "Supply Chain Management", "procedure_description": "A supply chain management program should include methods the assess the trustworthiness and technical maturity of a supplier, along with technical methods (e.g., code-signing, bill of materials) needed to validate the integrity of newly obtained devices and components. Develop procurement language that emphasizes the expectations for suppliers regarding the artifacts, audit records, and technical capabilities needed to validate the integrity of the devices supply chain."}, {"procedure_id": "M0951", "procedure_name": "Update Software", "procedure_description": "A patch management process should be implemented to check unused dependencies, unmaintained and/or previously vulnerable dependencies, unnecessary features, components, files, and documentation."}, {"procedure_id": "M0916", "procedure_name": "Vulnerability Scanning", "procedure_description": "Implement continuous monitoring of vulnerability sources. Also, use automatic and manual code review tools."}, {"procedure_id": "DS0022", "procedure_name": "File", "procedure_description": ""}]},
{"technique_id": "T0848", "technique_name": "Rogue Master", "technique_description": "Adversaries may setup a rogue master to leverage control server functions to communicate with outstations. A rogue master can be used to send legitimate control messages to other control system devices, affecting processes in unintended ways. It may also be used to disrupt network communications by capturing and receiving the network traffic meant for the actual master. Impersonating a master may also allow an adversary to avoid detection.", "technique_url": "https://attack.mitre.org/techniques/T0848", "procedure_examples": [{"procedure_id": "C0020", "procedure_name": "Maroochy Water Breach", "procedure_description": "In the"}, {"procedure_id": "M0802", "procedure_name": "Communication Authenticity", "procedure_description": "Protocols used for control functions should provide authenticity through MAC functions or digital signatures. If not, utilize bump-in-the-wire devices or VPNs to enforce communication authenticity between devices that are not capable of supporting this (e.g., legacy controllers, RTUs)."}, {"procedure_id": "M0937", "procedure_name": "Filter Network Traffic", "procedure_description": "Perform inline allowlisting of automation protocol commands  to prevent devices from sending unauthorized command or reporting messages. Allow/denylist techniques need to be designed with sufficient accuracy to prevent the unintended blocking of valid reporting messages."}, {"procedure_id": "M0807", "procedure_name": "Network Allowlists", "procedure_description": "Use host-based allowlists to prevent devices from accepting connections from unauthorized systems. For example, allowlists can be used to ensure devices can only connect with master stations or known management/engineering workstations."}, {"procedure_id": "M0930", "procedure_name": "Network Segmentation", "procedure_description": "Segment operational assets and their management devices based on their functional role within the process. Enabling more strict isolation to more critical control and operational information within the control environment."}, {"procedure_id": "M0813", "procedure_name": "Software Process and Device Authentication", "procedure_description": "Devices should authenticate all messages between master and outstation assets."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}, {"procedure_id": "DS0039", "procedure_name": "Asset", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}, {"procedure_id": "DS0040", "procedure_name": "Operational Databases", "procedure_description": ""}]},
{"technique_id": "T0861", "technique_name": "Point & Tag Identification", "technique_description": "Adversaries may collect point and tag values to gain a more comprehensive understanding of the process environment. Points may be values such as inputs, memory locations, outputs or other process specific variables.  Tags are the identifiers given to points for operator convenience.", "technique_url": "https://attack.mitre.org/techniques/T0861", "procedure_examples": [{"procedure_id": "S0093", "procedure_name": "Backdoor.Oldrea", "procedure_description": "The"}, {"procedure_id": "S1045", "procedure_name": "INCONTROLLER", "procedure_description": "can remotely read the OCP UA structure from devices."}, {"procedure_id": "M0801", "procedure_name": "Access Management", "procedure_description": "Authenticate all access to field controllers before authorizing access to, or modification of, a device's state, logic, or programs. Centralized authentication techniques can help manage the large number of field controller accounts needed across the ICS."}, {"procedure_id": "M0800", "procedure_name": "Authorization Enforcement", "procedure_description": "Systems and devices should restrict access to any data with potential confidentiality concerns, including point and tag information."}, {"procedure_id": "M0802", "procedure_name": "Communication Authenticity", "procedure_description": "Protocols used for control functions should provide authenticity through MAC functions or digital signatures. If not, utilize bump-in-the-wire devices or VPNs to enforce communication authenticity between devices that are not capable of supporting this (e.g., legacy controllers, RTUs)."}, {"procedure_id": "M0937", "procedure_name": "Filter Network Traffic", "procedure_description": "Perform inline allowlisting of automation protocol commands  to prevent devices from sending unauthorized command or reporting messages. Allow/denylist techniques need to be designed with sufficient accuracy to prevent the unintended blocking of valid messages."}, {"procedure_id": "M0804", "procedure_name": "Human User Authentication", "procedure_description": "All field controllers should require users to authenticate for all remote or local management sessions. The authentication mechanisms should also support"}, {"procedure_id": "M0807", "procedure_name": "Network Allowlists", "procedure_description": "Use host-based allowlists to prevent devices from accepting connections from unauthorized systems. For example, allowlists can be used to ensure devices can only connect with master stations or known management/engineering workstations."}, {"procedure_id": "M0930", "procedure_name": "Network Segmentation", "procedure_description": "Segment operational assets and their management devices based on their functional role within the process. Enabling more strict isolation to more critical control and operational information within the control environment."}, {"procedure_id": "M0813", "procedure_name": "Software Process and Device Authentication", "procedure_description": "Devices should authenticate all messages between master and outstation assets."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}]},
{"technique_id": "T0801", "technique_name": "Monitor Process State", "technique_description": "Adversaries may gather information about the physical process state. This information may be used to gain more information about the process itself or used as a trigger for malicious actions. The sources of process state information may vary such as, OPC tags, historian data, specific PLC block information, or network traffic.", "technique_url": "https://attack.mitre.org/techniques/T0801", "procedure_examples": [{"procedure_id": "S0604", "procedure_name": "Industroyer", "procedure_description": "'s OPC and IEC 61850 protocol modules include the ability to send stVal requests to read the status of operational variables."}, {"procedure_id": "S1072", "procedure_name": "Industroyer2", "procedure_description": "uses a General Interrogation command to monitor the device\u2019s Information Object Addresses (IOAs) and their IO state values."}, {"procedure_id": "S0603", "procedure_name": "Stuxnet", "procedure_description": "examines fields recorded by the DP_RECV monitor to determine if the target system is in a particular state of operation."}, {"procedure_id": "M0816", "procedure_name": "Mitigation Limited or Not Effective", "procedure_description": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}]},
{"technique_id": "T0883", "technique_name": "Internet Accessible Device", "technique_description": "Adversaries may gain access into industrial environments through systems exposed directly to the internet for remote access rather than through", "technique_url": "https://attack.mitre.org/techniques/T0883", "procedure_examples": [{"procedure_id": "C0031", "procedure_name": "Unitronics Defacement Campaign", "procedure_description": "During the"}, {"procedure_id": "M0930", "procedure_name": "Network Segmentation", "procedure_description": "Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls. Steps should be taken to periodically inventory internet accessible devices to determine if it differs from the expected."}, {"procedure_id": "DS0028", "procedure_name": "Logon Session", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}]},
{"technique_id": "T0865", "technique_name": "Spearphishing Attachment", "technique_description": "Adversaries may use a spearphishing attachment, a variant of spearphishing, as a form of a social engineering attack against specific targets. Spearphishing attachments are different from other forms of spearphishing in that they employ malware attached to an email. All forms of spearphishing are electronically delivered and target a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon", "technique_url": "https://attack.mitre.org/techniques/T0865", "procedure_examples": [{"procedure_id": "G1000", "procedure_name": "ALLANITE", "procedure_description": "utilized spear phishing to gain access into energy sector environments."}, {"procedure_id": "G0064", "procedure_name": "APT33", "procedure_description": "sent spear phishing emails containing links to HTML application files, which were embedded with malicious code."}, {"procedure_id": "S0093", "procedure_name": "Backdoor.Oldrea", "procedure_description": "The"}, {"procedure_id": "S0089", "procedure_name": "BlackEnergy", "procedure_description": "targeted energy sector organizations in a wide reaching email spearphishing campaign. Adversaries utilized malicious Microsoft Word documents attachments."}, {"procedure_id": "G0032", "procedure_name": "Lazarus Group", "procedure_description": "has been observed targeting organizations using spearphishing documents with embedded malicious payloads."}, {"procedure_id": "G0049", "procedure_name": "OilRig", "procedure_description": "used spearphishing emails with malicious Microsoft Excel spreadsheet attachments."}, {"procedure_id": "M0949", "procedure_name": "Antivirus/Antimalware", "procedure_description": "Deploy anti-virus on all systems that support external email."}, {"procedure_id": "M0931", "procedure_name": "Network Intrusion Prevention", "procedure_description": "Network intrusion prevention systems and systems designed to scan and remove malicious email attachments can be used to block activity."}, {"procedure_id": "M0921", "procedure_name": "Restrict Web-Based Content", "procedure_description": "Consider restricting access to email within critical process environments. Additionally, downloads and attachments may be disabled if email is still necessary."}, {"procedure_id": "M0917", "procedure_name": "User Training", "procedure_description": "Users can be trained to identify social engineering techniques and spearphishing emails."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}, {"procedure_id": "DS0022", "procedure_name": "File", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "DS0009", "procedure_name": "Process", "procedure_description": ""}]},
{"technique_id": "T0847", "technique_name": "Replication Through Removable Media", "technique_description": "Adversaries may move onto systems, such as those separated from the enterprise network, by copying malware to removable media which is inserted into the control systems environment. The adversary may rely on unknowing trusted third parties, such as suppliers or contractors with access privileges, to introduce the removable media. This technique enables initial access to target devices that never connect to untrusted networks, but are physically accessible.", "technique_url": "https://attack.mitre.org/techniques/T0847", "procedure_examples": [{"procedure_id": "S0608", "procedure_name": "Conficker", "procedure_description": "exploits Windows drive shares. Once it has infected a computer,"}, {"procedure_id": "S0603", "procedure_name": "Stuxnet", "procedure_description": "was able to self-replicate by being spread through removable drives. A willing insider or unknown third party, such as a contractor, may have brought the removable media into the target environment."}, {"procedure_id": "M0942", "procedure_name": "Disable or Remove Feature or Program", "procedure_description": "Consider the disabling of features such as AutoRun."}, {"procedure_id": "M0934", "procedure_name": "Limit Hardware Installation", "procedure_description": "Enforce system policies or physical restrictions to limit hardware such as USB devices on critical assets."}, {"procedure_id": "M0928", "procedure_name": "Operating System Configuration", "procedure_description": "Harden the system through operating system controls to prevent the known or unknown use of malicious removable media."}, {"procedure_id": "DS0016", "procedure_name": "Drive", "procedure_description": ""}, {"procedure_id": "DS0022", "procedure_name": "File", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}, {"procedure_id": "DS0009", "procedure_name": "Process", "procedure_description": ""}]},
{"technique_id": "T0819", "technique_name": "Exploit Public-Facing Application", "technique_description": "Adversaries may leverage weaknesses to exploit internet-facing software for initial access into an industrial network. Internet-facing software may be user applications, underlying networking implementations, an assets operating system, weak defenses, etc. Targets of this technique may be intentionally exposed for the purpose of remote management and visibility.", "technique_url": "https://attack.mitre.org/techniques/T0819", "procedure_examples": [{"procedure_id": "G0034", "procedure_name": "Sandworm Team", "procedure_description": "actors exploited vulnerabilities in GE's Cimplicity HMI and Advantech/Broadwin WebAccess HMI software which had been directly exposed to the internet."}, {"procedure_id": "M0948", "procedure_name": "Application Isolation and Sandboxing", "procedure_description": "Application isolation will limit the other processes and system features an exploited target can access. Examples of built in features are software restriction policies, AppLocker for Windows, and SELinux or AppArmor for Linux."}, {"procedure_id": "M0950", "procedure_name": "Exploit Protection", "procedure_description": "Web Application Firewalls may be used to limit exposure of applications to prevent exploit traffic from reaching the application."}, {"procedure_id": "M0930", "procedure_name": "Network Segmentation", "procedure_description": "Segment externally facing servers and services from the rest of the network with a DMZ or on separate hosting infrastructure."}, {"procedure_id": "M0926", "procedure_name": "Privileged Account Management", "procedure_description": "Use least privilege for service accounts."}, {"procedure_id": "M0951", "procedure_name": "Update Software", "procedure_description": "Regularly scan externally facing systems for vulnerabilities and establish procedures to rapidly patch systems when critical vulnerabilities are discovered through scanning and public disclosure."}, {"procedure_id": "M0916", "procedure_name": "Vulnerability Scanning", "procedure_description": "Regularly scan externally facing systems for vulnerabilities and establish procedures to rapidly patch systems when critical vulnerabilities are discovered through scanning and public disclosure."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}]},
{"technique_id": "T0863", "technique_name": "User Execution", "technique_description": "Adversaries may rely on a targeted organizations user interaction for the execution of malicious code. User interaction may consist of installing applications, opening email attachments, or granting higher permissions to documents.", "technique_url": "https://attack.mitre.org/techniques/T0863", "procedure_examples": [{"procedure_id": "S0093", "procedure_name": "Backdoor.Oldrea", "procedure_description": "Execution of"}, {"procedure_id": "S0606", "procedure_name": "Bad Rabbit", "procedure_description": "is disguised as an Adobe Flash installer. When the file is opened it starts locking the infected computer."}, {"procedure_id": "S0496", "procedure_name": "REvil", "procedure_description": "initially executes when the user clicks on a JavaScript file included in the phishing emails .zip attachment."}, {"procedure_id": "S0603", "procedure_name": "Stuxnet", "procedure_description": "infects DLL's associated with the WinCC Simatic manager which are responsible for opening project files. If a user opens an uninfected project file using a compromised manager, the file will be infected with Stuxnet code. If an infected project is opened with the Simatic manager, the modified data file will trigger a search for the"}, {"procedure_id": "M0949", "procedure_name": "Antivirus/Antimalware", "procedure_description": "Ensure anti-virus solution can detect malicious files that allow user execution (e.g., Microsoft Office Macros, program installers)."}, {"procedure_id": "M0945", "procedure_name": "Code Signing", "procedure_description": "Prevent the use of unsigned executables, such as installers and scripts."}, {"procedure_id": "M0938", "procedure_name": "Execution Prevention", "procedure_description": "Application control may be able to prevent the running of executables masquerading as other files."}, {"procedure_id": "M0931", "procedure_name": "Network Intrusion Prevention", "procedure_description": "If a link is being visited by a user, network intrusion prevention systems and systems designed to scan and remove malicious downloads can be used to block activity."}, {"procedure_id": "M0921", "procedure_name": "Restrict Web-Based Content", "procedure_description": "If a link is being visited by a user, block unknown or unused files in transit by default that should not be downloaded or by policy from suspicious sites as a best practice to prevent some vectors, such as .scr, .exe, .pif, .cpl, etc. Some download scanning devices can open and analyze compressed and encrypted formats, such as zip and rar that may be used to conceal malicious files."}, {"procedure_id": "M0917", "procedure_name": "User Training", "procedure_description": "Use user training as a way to bring awareness to common phishing and spearphishing techniques and how to raise suspicion for potentially malicious events."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}, {"procedure_id": "DS0017", "procedure_name": "Command", "procedure_description": ""}, {"procedure_id": "DS0022", "procedure_name": "File", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}, {"procedure_id": "DS0009", "procedure_name": "Process", "procedure_description": ""}]},
{"technique_id": "T0822", "technique_name": "External Remote Services", "technique_description": "Adversaries may leverage external remote services as a point of initial access into your network. These services allow users to connect to internal network resources from external locations. Examples are VPNs, Citrix, and other access mechanisms. Remote service gateways often manage connections and credential authentication for these services.", "technique_url": "https://attack.mitre.org/techniques/T0822", "procedure_examples": [{"procedure_id": "C0028", "procedure_name": "2015 Ukraine Electric Power Attack", "procedure_description": "During the"}, {"procedure_id": "C0020", "procedure_name": "Maroochy Water Breach", "procedure_description": "In the"}, {"procedure_id": "M0936", "procedure_name": "Account Use Policies", "procedure_description": "Configure features related to account use like login attempt lockouts, specific login times, and password strength requirements as examples. Consider these features as they relate to assets which may impact safety and availability."}, {"procedure_id": "M0942", "procedure_name": "Disable or Remove Feature or Program", "procedure_description": "Consider removal of remote services which are not regularly in use, or only enabling them when required (e.g., vendor remote access). Ensure all external remote access point (e.g., jump boxes, VPN concentrator) are configured with least functionality, especially the removal of unnecessary services."}, {"procedure_id": "M0935", "procedure_name": "Limit Access to Resource Over Network", "procedure_description": "Limit access to remote services through centrally managed concentrators such as VPNs and other managed remote access systems."}, {"procedure_id": "M0932", "procedure_name": "Multi-factor Authentication", "procedure_description": "Use strong multi-factor authentication for remote service accounts to mitigate an adversary's ability to leverage stolen credentials. Be aware of multi-factor authentication interception techniques for some implementations."}, {"procedure_id": "M0930", "procedure_name": "Network Segmentation", "procedure_description": "Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls. Consider a jump server or host into the DMZ for greater access control. Leverage this DMZ or corporate resources for vendor access."}, {"procedure_id": "M0927", "procedure_name": "Password Policies", "procedure_description": "Set and enforce secure password policies for accounts."}, {"procedure_id": "M0918", "procedure_name": "User Account Management", "procedure_description": "Consider utilizing jump boxes for external remote access. Additionally, dynamic account management may be used to easily remove accounts when not in use."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}, {"procedure_id": "DS0028", "procedure_name": "Logon Session", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}]},
{"technique_id": "T0817", "technique_name": "Drive-by Compromise", "technique_description": "Adversaries may gain access to a system during a drive-by compromise, when a user visits a website as part of a regular browsing session. With this technique, the user's web browser is targeted and exploited simply by visiting the compromised website.", "technique_url": "https://attack.mitre.org/techniques/T0817", "procedure_examples": [{"procedure_id": "G1000", "procedure_name": "ALLANITE", "procedure_description": "leverages watering hole attacks to gain access into electric utilities."}, {"procedure_id": "S0606", "procedure_name": "Bad Rabbit", "procedure_description": "ransomware spreads through drive-by attacks where insecure websites are compromised. While the target is visiting a legitimate website, a malware dropper is being downloaded from the threat actors infrastructure."}, {"procedure_id": "G0035", "procedure_name": "Dragonfly", "procedure_description": "utilized watering hole attacks on energy sector websites by injecting a redirect iframe to deliver"}, {"procedure_id": "G0049", "procedure_name": "OilRig", "procedure_description": "has been seen utilizing watering hole attacks to collect credentials which could be used to gain access into ICS networks."}, {"procedure_id": "G0088", "procedure_name": "TEMP.Veles", "procedure_description": "utilizes watering hole websites to target industrial employees."}, {"procedure_id": "M0948", "procedure_name": "Application Isolation and Sandboxing", "procedure_description": "Built-in browser sandboxes and application isolation may be used to contain web-based malware."}, {"procedure_id": "M0950", "procedure_name": "Exploit Protection", "procedure_description": "Utilize exploit protection to prevent activities which may be exploited through malicious web sites."}, {"procedure_id": "M0921", "procedure_name": "Restrict Web-Based Content", "procedure_description": "Restrict browsers to limit the capabilities of malicious ads and Javascript."}, {"procedure_id": "M0951", "procedure_name": "Update Software", "procedure_description": "Ensure all browsers and plugins are kept updated to help prevent the exploit phase of this technique. Use modern browsers with security features enabled."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}, {"procedure_id": "DS0022", "procedure_name": "File", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}, {"procedure_id": "DS0009", "procedure_name": "Process", "procedure_description": ""}]},
{"technique_id": "T0853", "technique_name": "Scripting", "technique_description": "Adversaries may use scripting languages to execute arbitrary code in the form of a pre-written script or in the form of user-supplied code to an interpreter. Scripting languages are programming languages that differ from compiled languages, in that scripting languages use an interpreter, instead of a compiler. These interpreters read and compile part of the source code just before it is executed, as opposed to compilers, which compile each and every line of code to an executable file. Scripting allows software developers to run their code on any system where the interpreter exists. This way, they can distribute one package, instead of precompiling executables for many different systems. Scripting languages, such as Python, have their interpreters shipped as a default with many Linux distributions.", "technique_url": "https://attack.mitre.org/techniques/T0853", "procedure_examples": [{"procedure_id": "C0025", "procedure_name": "2016 Ukraine Electric Power Attack", "procedure_description": "During the"}, {"procedure_id": "C0034", "procedure_name": "2022 Ukraine Electric Power Attack", "procedure_description": "During the"}, {"procedure_id": "G0064", "procedure_name": "APT33", "procedure_description": "utilized PowerShell scripts to establish command and control and install files for execution."}, {"procedure_id": "G0049", "procedure_name": "OilRig", "procedure_description": "has embedded a macro within spearphishing attachments that has been made up of both a VBScript and a PowerShell script."}, {"procedure_id": "S0496", "procedure_name": "REvil", "procedure_description": "utilizes JavaScript, WScript, and PowerShell scripts to execute. The malicious JavaScript attachment has an obfuscated PowerShell script that executes the malware."}, {"procedure_id": "S1009", "procedure_name": "Triton", "procedure_description": "communicates with Triconex controllers using a custom component framework written entirely in Python. The modules that implement the TriStation communication protocol and other supporting components are found in a separate file -- library.zip -- the main script that employs this functionality is compiled into a standalone py2exe Windows executable -- trilog.exe  which includes a Python environment."}, {"procedure_id": "C0030", "procedure_name": "Triton Safety Instrumented System Attack", "procedure_description": "In the"}, {"procedure_id": "M0948", "procedure_name": "Application Isolation and Sandboxing", "procedure_description": "Consider the use of application isolation and sandboxing to restrict specific operating system interactions such as access through user accounts, services, system calls, registry, and network access. This may be even more useful in cases where the source of the executed script is unknown."}, {"procedure_id": "M0942", "procedure_name": "Disable or Remove Feature or Program", "procedure_description": "Consider removal or disabling of programs and features which may be used to run malicious scripts (e.g., scripting language IDEs, PowerShell, visual studio)."}, {"procedure_id": "M0938", "procedure_name": "Execution Prevention", "procedure_description": "Execution prevention may prevent malicious scripts from accessing protected resources."}, {"procedure_id": "DS0017", "procedure_name": "Command", "procedure_description": ""}, {"procedure_id": "DS0011", "procedure_name": "Module", "procedure_description": ""}, {"procedure_id": "DS0009", "procedure_name": "Process", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}, {"procedure_id": "DS0012", "procedure_name": "Script", "procedure_description": ""}]},
{"technique_id": "T0823", "technique_name": "Graphical User Interface", "technique_description": "Adversaries may attempt to gain access to a machine via a Graphical User Interface (GUI) to enhance execution capabilities. Access to a GUI allows a user to interact with a computer in a more visual manner than a CLI. A GUI allows users to move a cursor and click on interface objects, with a mouse and keyboard as the main input devices, as opposed to just using the keyboard.", "technique_url": "https://attack.mitre.org/techniques/T0823", "procedure_examples": [{"procedure_id": "C0028", "procedure_name": "2015 Ukraine Electric Power Attack", "procedure_description": "During the"}, {"procedure_id": "M0816", "procedure_name": "Mitigation Limited or Not Effective", "procedure_description": "Once an adversary has access to a remote GUI they can abuse system features, such as required HMI functions."}, {"procedure_id": "DS0017", "procedure_name": "Command", "procedure_description": ""}, {"procedure_id": "DS0028", "procedure_name": "Logon Session", "procedure_description": ""}, {"procedure_id": "DS0011", "procedure_name": "Module", "procedure_description": ""}, {"procedure_id": "DS0009", "procedure_name": "Process", "procedure_description": ""}]},
{"technique_id": "T0821", "technique_name": "Modify Controller Tasking", "technique_description": "Adversaries may modify the tasking of a controller to allow for the execution of their own programs. This can allow an adversary to manipulate the execution flow and behavior of a controller.", "technique_url": "https://attack.mitre.org/techniques/T0821", "procedure_examples": [{"procedure_id": "S1006", "procedure_name": "PLC-Blaster", "procedure_description": "'s code is stored in OB9999. The original code on the target is untouched. The OB is automatically detected by the PLC and executed."}, {"procedure_id": "S0603", "procedure_name": "Stuxnet", "procedure_description": "infects OB1 so that its malicious code sequence is executed at the start of a cycle. It also infects OB35. OB35 acts as a watchdog, and on certain conditions, it can stop the execution of OB1."}, {"procedure_id": "S1009", "procedure_name": "Triton", "procedure_description": "'s argument-setting and inject.bin shellcode are added to the program table on the Tricon so that they are executed by the firmware once each cycle."}, {"procedure_id": "M0947", "procedure_name": "Audit", "procedure_description": "Provide the ability to verify the integrity of controller tasking. While techniques like CRCs and checksums are commonly used, they are not cryptographically secure and can be vulnerable to collisions. Preferably cryptographic hash functions (e.g., SHA-2, SHA-3) should be used."}, {"procedure_id": "M0800", "procedure_name": "Authorization Enforcement", "procedure_description": "All field controllers should restrict the modification of controller tasks to only certain users (e.g., engineers, field technician), preferably through implementing a role-based access mechanism."}, {"procedure_id": "M0945", "procedure_name": "Code Signing", "procedure_description": "Utilize code signatures to verify the integrity and authenticity of programs installed on safety or control assets, including the associated controller tasking."}, {"procedure_id": "M0804", "procedure_name": "Human User Authentication", "procedure_description": "All field controllers should require users to authenticate for all remote or local management sessions. The authentication mechanisms should also support Account Use Policies, Password Policies, and\u00a0User Account Management."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}, {"procedure_id": "DS0039", "procedure_name": "Asset", "procedure_description": ""}, {"procedure_id": "DS0040", "procedure_name": "Operational Databases", "procedure_description": ""}]},
{"technique_id": "T0834", "technique_name": "Native API", "technique_description": "Adversaries may directly interact with the native OS application programming interface (API) to access system functions. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes.  These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.", "technique_url": "https://attack.mitre.org/techniques/T0834", "procedure_examples": [{"procedure_id": "S1006", "procedure_name": "PLC-Blaster", "procedure_description": "uses the system function blocks TCON and TDISCON to initiate and destroy TCP connections to arbitrary systems. Buffers may be sent and received on these connections with TRCV und TSEND system function blocks."}, {"procedure_id": "S0603", "procedure_name": "Stuxnet", "procedure_description": "calls system function blocks which are part of the operating system running on the PLC. Theyre used to execute system tasks, such as reading the system clock (SFC1) and generating data blocks on the fly."}, {"procedure_id": "S1009", "procedure_name": "Triton", "procedure_description": "'s imain.bin payload takes commands from the TsHi.ExplReadRam(Ex), TsHi.ExplWriteRam(Ex) and TsHi.ExplExec functions to perform operations on controller memory and registers using syscalls written in PowerPC shellcode."}, {"procedure_id": "M0938", "procedure_name": "Execution Prevention", "procedure_description": "Minimize the exposure of API calls that allow the execution of code."}, {"procedure_id": "DS0009", "procedure_name": "Process", "procedure_description": ""}]},
{"technique_id": "T0807", "technique_name": "Command-Line Interface", "technique_description": "Adversaries may utilize command-line interfaces (CLIs) to interact with systems and execute commands. CLIs provide a means of interacting with computer systems and are a common feature across many types of platforms and devices within control systems environments.  Adversaries may also use CLIs to install and run new software, including malicious tools that may be installed over the course of an operation.", "technique_url": "https://attack.mitre.org/techniques/T0807", "procedure_examples": [{"procedure_id": "C0025", "procedure_name": "2016 Ukraine Electric Power Attack", "procedure_description": "During the"}, {"procedure_id": "C0034", "procedure_name": "2022 Ukraine Electric Power Attack", "procedure_description": "During the"}, {"procedure_id": "S0604", "procedure_name": "Industroyer", "procedure_description": "The name of the"}, {"procedure_id": "G0034", "procedure_name": "Sandworm Team", "procedure_description": "uses the MS-SQL server xp_cmdshell command, and PowerShell to execute commands."}, {"procedure_id": "S0603", "procedure_name": "Stuxnet", "procedure_description": "will store and execute SQL code that will extract and execute Stuxnet from the saved CAB file using xp_cmdshell with the following command:"}, {"procedure_id": "C0030", "procedure_name": "Triton Safety Instrumented System Attack", "procedure_description": "In the"}, {"procedure_id": "M0942", "procedure_name": "Disable or Remove Feature or Program", "procedure_description": "Consider removing or restricting features that are unnecessary to an asset's intended function within the control environment."}, {"procedure_id": "M0938", "procedure_name": "Execution Prevention", "procedure_description": "Execution prevention may block malicious software from accessing protected resources through the command line interface."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}, {"procedure_id": "DS0017", "procedure_name": "Command", "procedure_description": ""}, {"procedure_id": "DS0009", "procedure_name": "Process", "procedure_description": ""}]},
{"technique_id": "T0871", "technique_name": "Execution through API", "technique_description": "Adversaries may attempt to leverage Application Program Interfaces (APIs) used for communication between control software and the hardware. Specific functionality is often coded into APIs which can be called by software to engage specific functions on a device or other software.", "technique_url": "https://attack.mitre.org/techniques/T0871", "procedure_examples": [{"procedure_id": "S1009", "procedure_name": "Triton", "procedure_description": "leverages a reconstructed TriStation protocol within its framework to trigger APIs related to program download, program allocation, and program changes."}, {"procedure_id": "M0801", "procedure_name": "Access Management", "procedure_description": "Access Management technologies can be used to enforce authorization policies and decisions, especially when existing field devices do not provide capabilities to support user identification and authentication."}, {"procedure_id": "M0800", "procedure_name": "Authorization Enforcement", "procedure_description": "All APIs used to perform execution, especially those hosted on embedded controllers (e.g., PLCs), should provide adequate authorization enforcement of user access. Minimize user's access to only required API calls."}, {"procedure_id": "M0938", "procedure_name": "Execution Prevention", "procedure_description": "Minimize the exposure of API calls that allow the execution of code."}, {"procedure_id": "M0804", "procedure_name": "Human User Authentication", "procedure_description": "All APIs on remote systems or local processes should require the authentication of users before executing any code or system changes."}, {"procedure_id": "DS0009", "procedure_name": "Process", "procedure_description": ""}]},
{"technique_id": "T0895", "technique_name": "Autorun Image", "technique_description": "Adversaries may leverage AutoRun functionality or scripts to execute malicious code. Devices configured to enable AutoRun functionality or legacy operating systems may be susceptible to abuse of these features to run malicious code stored on various forms of removeable media (i.e., USB, Disk Images [.ISO]). Commonly, AutoRun or AutoPlay are disabled in many operating systems configurations to mitigate against this technique. If a device is configured to enable AutoRun or AutoPlay, adversaries may execute code on the device by mounting the removable media to the device, either through physical or virtual means. This may be especially relevant for virtual machine environments where disk images may be dynamically mapped to a guest system on a hypervisor.", "technique_url": "https://attack.mitre.org/techniques/T0895", "procedure_examples": [{"procedure_id": "C0034", "procedure_name": "2022 Ukraine Electric Power Attack", "procedure_description": "During the"}, {"procedure_id": "M0928", "procedure_name": "Operating System Configuration", "procedure_description": "Configure operating systems to disable the autorun of any specific file types or drives."}, {"procedure_id": "DS0016", "procedure_name": "Drive", "procedure_description": ""}, {"procedure_id": "DS0009", "procedure_name": "Process", "procedure_description": ""}]},
{"technique_id": "T0874", "technique_name": "Hooking", "technique_description": "Adversaries may hook into application programming interface (API) functions used by processes to redirect calls for execution and privilege escalation means. Windows processes often leverage these API functions to perform tasks that require reusable system resources. Windows API functions are typically stored in dynamic-link libraries (DLLs) as exported functions.", "technique_url": "https://attack.mitre.org/techniques/T0874", "procedure_examples": [{"procedure_id": "S0603", "procedure_name": "Stuxnet", "procedure_description": "modifies the Import Address Tables DLLs to hook specific APIs that are used to open project files."}, {"procedure_id": "S1009", "procedure_name": "Triton", "procedure_description": "'s injector, inject.bin, changes the function pointer of the 'get main processor diagnostic data' TriStation command to the address of imain.bin so that it is executed prior to the normal handler."}, {"procedure_id": "M0947", "procedure_name": "Audit", "procedure_description": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses. Perform periodic integrity checks of the device to validate the correctness of the firmware, software, programs, and configurations. Integrity checks, which typically include cryptographic hashes or digital signatures, should be compared to those obtained at known valid states, especially after events like device reboots, program downloads, or program restarts."}, {"procedure_id": "M0944", "procedure_name": "Restrict Library Loading", "procedure_description": "Restrict the use of untrusted or unknown libraries, such as remote or unknown DLLs."}, {"procedure_id": "DS0009", "procedure_name": "Process", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}]},
{"technique_id": "T0873", "technique_name": "Project File Infection", "technique_description": "Adversaries may attempt to infect project files with malicious code. These project files may consist of objects, program organization units, variables such as tags, documentation, and other configurations needed for PLC programs to function.  Using built in functions of the engineering software, adversaries may be able to download an infected program to a PLC in the operating environment enabling further", "technique_url": "https://attack.mitre.org/techniques/T0873", "procedure_examples": [{"procedure_id": "S0603", "procedure_name": "Stuxnet", "procedure_description": "copies itself into Step 7 projects in such a way that it automatically executes when the Step 7 project is loaded."}, {"procedure_id": "M0947", "procedure_name": "Audit", "procedure_description": "Review the integrity of project files to verify they have not been modified by adversary behavior. Verify a cryptographic hash for the file with a known trusted version, or look for other indicators of modification (e.g., timestamps)."}, {"procedure_id": "M0945", "procedure_name": "Code Signing", "procedure_description": "Allow for code signing of any project files stored at rest to prevent unauthorized tampering. Ensure the signing keys are not easily accessible on the same system."}, {"procedure_id": "M0941", "procedure_name": "Encrypt Sensitive Information", "procedure_description": "When at rest, project files should be encrypted to prevent unauthorized changes."}, {"procedure_id": "M0922", "procedure_name": "Restrict File and Directory Permissions", "procedure_description": "Ensure permissions restrict project file access to only engineer and technician user groups and accounts."}, {"procedure_id": "DS0022", "procedure_name": "File", "procedure_description": ""}]},
{"technique_id": "T0889", "technique_name": "Modify Program", "technique_description": "Adversaries may modify or add a program on a controller to affect how it interacts with the physical process, peripheral devices and other hosts on the network. Modification to controller programs can be accomplished using a Program Download in addition to other types of program modification such as online edit and program append.", "technique_url": "https://attack.mitre.org/techniques/T0889", "procedure_examples": [{"procedure_id": "S1006", "procedure_name": "PLC-Blaster", "procedure_description": "copies itself to various Program Organization Units (POU) on the target device.  The POUs include the Data Block, Function, and Function Block."}, {"procedure_id": "S0603", "procedure_name": "Stuxnet", "procedure_description": "infects PLCs with different code depending on the characteristics of the target system. An infection sequence consists of code blocks and data blocks that will be downloaded to the PLC to alter its behavior."}, {"procedure_id": "M0947", "procedure_name": "Audit", "procedure_description": "Provide the ability to verify the integrity of control logic or programs loaded on a controller. While techniques like CRCs and checksums are commonly used, they are not cryptographically strong and can be vulnerable to collisions. Preferably cryptographic hash functions (e.g., SHA-2, SHA-3) should be used."}, {"procedure_id": "M0800", "procedure_name": "Authorization Enforcement", "procedure_description": "All field controllers should restrict the modification of programs to only certain users (e.g., engineers, field technician), preferably through implementing a role-based access mechanism."}, {"procedure_id": "M0945", "procedure_name": "Code Signing", "procedure_description": "Utilize code signatures to verify the integrity and authenticity of programs installed on safety or control assets."}, {"procedure_id": "M0804", "procedure_name": "Human User Authentication", "procedure_description": "All field controllers should require users to authenticate for all remote or local management sessions. The authentication mechanisms should also support Account Use Policies, Password Policies, and\u00a0User Account Management."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}, {"procedure_id": "DS0039", "procedure_name": "Asset", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "DS0040", "procedure_name": "Operational Databases", "procedure_description": ""}]},
{"technique_id": "T0868", "technique_name": "Detect Operating Mode", "technique_description": "Adversaries may gather information about a PLCs or controllers current operating mode. Operating modes dictate what change or maintenance functions can be manipulated and are often controlled by a key switch on the PLC (e.g.,  run, prog [program], and remote). Knowledge of these states may be valuable to an adversary to determine if they are able to reprogram the PLC. Operating modes and the mechanisms by which they are selected often vary by vendor and product line. Some commonly implemented operating modes are described below:", "technique_url": "https://attack.mitre.org/techniques/T0868", "procedure_examples": [{"procedure_id": "S1009", "procedure_name": "Triton", "procedure_description": "contains a file named TS_cnames.py which contains default definitions for program state (TS_progstate). Program state is referenced in TsHi.py."}, {"procedure_id": "M0801", "procedure_name": "Access Management", "procedure_description": "Authenticate all access to field controllers before authorizing access to, or modification of, a device's state, logic, or programs. Centralized authentication techniques can help manage the large number of field controller accounts needed across the ICS."}, {"procedure_id": "M0800", "procedure_name": "Authorization Enforcement", "procedure_description": "All field controllers should restrict the modification of programs to only certain users (e.g., engineers, field technician), preferably through implementing a role-based access mechanism."}, {"procedure_id": "M0802", "procedure_name": "Communication Authenticity", "procedure_description": "Protocols used for control functions should provide authenticity through MAC functions or digital signatures. If not, utilize bump-in-the-wire devices or VPNs to enforce communication authenticity between devices that are not capable of supporting this (e.g., legacy controllers, RTUs)."}, {"procedure_id": "M0937", "procedure_name": "Filter Network Traffic", "procedure_description": "Perform inline allowlisting of automation protocol commands  to prevent devices from sending unauthorized command or reporting messages. Allow/denylist techniques need to be designed with sufficient accuracy to prevent the unintended blocking of valid messages."}, {"procedure_id": "M0804", "procedure_name": "Human User Authentication", "procedure_description": "All field controllers should require users to authenticate for all remote or local management sessions. The authentication mechanisms should also support"}, {"procedure_id": "M0807", "procedure_name": "Network Allowlists", "procedure_description": "Use host-based allowlists to prevent devices from accepting connections from unauthorized systems. For example, allowlists can be used to ensure devices can only connect with master stations or known management/engineering workstations."}, {"procedure_id": "M0930", "procedure_name": "Network Segmentation", "procedure_description": "Segment operational network and systems to restrict access to critical system functions to predetermined management systems."}, {"procedure_id": "M0813", "procedure_name": "Software Process and Device Authentication", "procedure_description": "Authenticate connections from software and devices to prevent unauthorized systems from accessing protected management functions."}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}]},
{"technique_id": "T0893", "technique_name": "Data from Local System", "technique_description": "Adversaries may target and collect data from local system sources, such as file systems, configuration files, or local databases. This can include sensitive data such as specifications, schematics, or diagrams of control system layouts, devices, and processes.", "technique_url": "https://attack.mitre.org/techniques/T0893", "procedure_examples": [{"procedure_id": "S1000", "procedure_name": "ACAD/Medre.A", "procedure_description": "collects information related to the AutoCAD application. The worm collects AutoCAD (*.dwg) files with drawings from infected systems."}, {"procedure_id": "S0038", "procedure_name": "Duqu", "procedure_description": "downloads additional modules for the collection of data from local systems. The modules are named: infostealer 1, infostealer 2 and reconnaissance."}, {"procedure_id": "S0143", "procedure_name": "Flame", "procedure_description": "has built-in modules to gather information from compromised computers."}, {"procedure_id": "M0803", "procedure_name": "Data Loss Prevention", "procedure_description": "Data loss prevention can restrict access to sensitive data and detect sensitive data that is unencrypted."}, {"procedure_id": "M0941", "procedure_name": "Encrypt Sensitive Information", "procedure_description": "Information which is sensitive to the operation and architecture of the process environment may be encrypted to ensure confidentiality and restrict access to only those who need to know."}, {"procedure_id": "M0922", "procedure_name": "Restrict File and Directory Permissions", "procedure_description": "Protect files stored locally with proper permissions to limit opportunities for adversaries to interact and collect information from the local system."}, {"procedure_id": "M0917", "procedure_name": "User Training", "procedure_description": "Develop and publish policies that define acceptable information to be stored on local systems."}, {"procedure_id": "DS0017", "procedure_name": "Command", "procedure_description": ""}, {"procedure_id": "DS0022", "procedure_name": "File", "procedure_description": ""}, {"procedure_id": "DS0009", "procedure_name": "Process", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}, {"procedure_id": "DS0012", "procedure_name": "Script", "procedure_description": ""}]},
{"technique_id": "T0890", "technique_name": "Exploitation for Privilege Escalation", "technique_description": "Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.", "technique_url": "https://attack.mitre.org/techniques/T0890", "procedure_examples": [{"procedure_id": "S1045", "procedure_name": "INCONTROLLER", "procedure_description": "has the ability to exploit a vulnerable Asrock driver (AsrDrv103.sys) using CVE-2020-15368 to load its own unsigned driver on the system."}, {"procedure_id": "S1009", "procedure_name": "Triton", "procedure_description": "leverages a previously-unknown vulnerability affecting Tricon MP3008 firmware versions 10.010.4 allows an insecurely-written system call to be exploited to achieve an arbitrary 2-byte write primitive, which is then used to gain supervisor privileges."}, {"procedure_id": "M0948", "procedure_name": "Application Isolation and Sandboxing", "procedure_description": "Make it difficult for adversaries to advance their operation through exploitation of undiscovered or unpatched vulnerabilities by using sandboxing. Other types of virtualization and application microsegmentation may also mitigate the impact of some types of exploitation. Risks of additional exploits and weaknesses in these systems may still exist."}, {"procedure_id": "M0950", "procedure_name": "Exploit Protection", "procedure_description": "Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior."}, {"procedure_id": "M0919", "procedure_name": "Threat Intelligence Program", "procedure_description": "Develop a robust cyber threat intelligence capability to determine what types and levels of threat may use software exploits and 0-days against a particular organization."}, {"procedure_id": "M0951", "procedure_name": "Update Software", "procedure_description": "Update software regularly by employing patch management for internal enterprise endpoints and servers."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}]},
{"technique_id": "T0877", "technique_name": "I/O Image", "technique_description": "Adversaries may seek to capture process values related to the inputs and outputs of a PLC. During the scan cycle, a PLC reads the status of all inputs and stores them in an image table.  The image table is the PLCs internal storage location where values of inputs/outputs for one scan are stored while it executes the user program. After the PLC has solved the entire logic program, it updates the output image table. The contents of this output image table are written to the corresponding output points in I/O Modules.", "technique_url": "https://attack.mitre.org/techniques/T0877", "procedure_examples": [{"procedure_id": "S0603", "procedure_name": "Stuxnet", "procedure_description": "copies the input area of an I/O image into data blocks with a one second interval between copies, forming a 21 second recording of the input area. The input area contains information being passed to the PLC from a peripheral. For example, the current state of a valve or the temperature of a device."}, {"procedure_id": "M0816", "procedure_name": "Mitigation Limited or Not Effective", "procedure_description": "This technique may not be effectively mitigated against, consider controls for assets and processes that lead to the use of this technique."}, {"procedure_id": "DS0039", "procedure_name": "Asset", "procedure_description": ""}]},
{"technique_id": "T0811", "technique_name": "Data from Information Repositories", "technique_description": "Adversaries may target and collect data from information repositories. This can include sensitive data such as specifications, schematics, or diagrams of control system layouts, devices, and processes. Examples of information repositories include reference databases in the process environment, as well as databases in the corporate network that might contain information about the ICS.", "technique_url": "https://attack.mitre.org/techniques/T0811", "procedure_examples": [{"procedure_id": "S0038", "procedure_name": "Duqu", "procedure_description": "downloads additional modules for the collection of data in information repositories, including the Infostealer 2 module that can access data from Windows Shares."}, {"procedure_id": "M0947", "procedure_name": "Audit", "procedure_description": "Consider periodic reviews of accounts and privileges for critical and sensitive repositories."}, {"procedure_id": "M0941", "procedure_name": "Encrypt Sensitive Information", "procedure_description": "Information which is sensitive to the operation and architecture of the process environment may be encrypted to ensure confidentiality and restrict access to only those who need to know."}, {"procedure_id": "M0926", "procedure_name": "Privileged Account Management", "procedure_description": "Minimize permissions and access for service accounts to limit the information that may be exposed or collected by malicious users or software."}, {"procedure_id": "M0922", "procedure_name": "Restrict File and Directory Permissions", "procedure_description": "Protect files with proper permissions to limit opportunities for adversaries to interact and collect information from databases."}, {"procedure_id": "M0918", "procedure_name": "User Account Management", "procedure_description": "Ensure users and user groups have appropriate permissions for their roles through Identity and Access Management (IAM) controls to prevent misuse. Implement user accounts for each individual that may access the repositories for role enforcement and non-repudiation of actions."}, {"procedure_id": "M0917", "procedure_name": "User Training", "procedure_description": "Develop and publish policies that define acceptable information to be stored in repositories."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}, {"procedure_id": "DS0028", "procedure_name": "Logon Session", "procedure_description": ""}, {"procedure_id": "DS0033", "procedure_name": "Network Share", "procedure_description": ""}]},
{"technique_id": "T0830", "technique_name": "Adversary-in-the-Middle", "technique_description": "Adversaries with privileged network access may seek to modify network traffic in real time using adversary-in-the-middle (AiTM) attacks.  This type of attack allows the adversary to intercept traffic to and/or from a particular device on the network. If a AiTM attack is established, then the adversary has the ability to block, log, modify, or inject traffic into the communication stream. There are several ways to accomplish this attack, but some of the most-common are Address Resolution Protocol (ARP) poisoning and the use of a proxy.", "technique_url": "https://attack.mitre.org/techniques/T0830", "procedure_examples": [{"procedure_id": "C0030", "procedure_name": "Triton Safety Instrumented System Attack", "procedure_description": "In the"}, {"procedure_id": "S1010", "procedure_name": "VPNFilter", "procedure_description": "The"}, {"procedure_id": "M0947", "procedure_name": "Audit", "procedure_description": "Limit access to network infrastructure and resources that can be used to reshape traffic or otherwise produce AiTM conditions."}, {"procedure_id": "M0802", "procedure_name": "Communication Authenticity", "procedure_description": "Communication authenticity will ensure that any messages tampered with through AiTM can be detected, but cannot prevent eavesdropping on these. In addition, providing communication authenticity around various discovery protocols, such as DNS, can be used to prevent various AiTM procedures."}, {"procedure_id": "M0942", "procedure_name": "Disable or Remove Feature or Program", "procedure_description": "Disable unnecessary legacy network protocols that may be used for AiTM if applicable."}, {"procedure_id": "M0931", "procedure_name": "Network Intrusion Prevention", "procedure_description": "Network intrusion detection and prevention systems that can identify traffic patterns indicative of AiTM activity can be used to mitigate activity at the network level."}, {"procedure_id": "M0930", "procedure_name": "Network Segmentation", "procedure_description": "Network segmentation can be used to isolate infrastructure components that do not require broad network access. This may mitigate, or at least alleviate, the scope of AiTM activity."}, {"procedure_id": "M0810", "procedure_name": "Out-of-Band Communications Channel", "procedure_description": "Utilize out-of-band communication to validate the integrity of data from the primary channel."}, {"procedure_id": "M0813", "procedure_name": "Software Process and Device Authentication", "procedure_description": "To protect against AiTM, authentication mechanisms should not send credentials across the network in plaintext and should also implement mechanisms to prevent replay attacks (such as nonces or timestamps). Challenge-response based authentication techniques that do not directly send credentials over the network provide better protection from AiTM."}, {"procedure_id": "M0814", "procedure_name": "Static Network Configuration", "procedure_description": "Statically defined ARP entries can prevent manipulation and sniffing of switched network traffic, as some AiTM techniques depend on sending spoofed ARP messages to manipulate network host's dynamic ARP tables."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}, {"procedure_id": "DS0009", "procedure_name": "Process", "procedure_description": ""}, {"procedure_id": "DS0019", "procedure_name": "Service", "procedure_description": ""}, {"procedure_id": "DS0024", "procedure_name": "Windows Registry", "procedure_description": ""}]},
{"technique_id": "T0806", "technique_name": "Brute Force I/O", "technique_description": "Adversaries may repetitively or successively change I/O point values to perform an action. Brute Force I/O may be achieved by changing either a range of I/O point values or a single point value repeatedly to manipulate a process function. The adversary's goal and the information they have about the target environment will influence which of the options they choose. In the case of brute forcing a range of point values, the adversary may be able to achieve an impact without targeting a specific point. In the case where a single point is targeted, the adversary may be able to generate instability on the process function associated with that particular point.", "technique_url": "https://attack.mitre.org/techniques/T0806", "procedure_examples": [{"procedure_id": "S0604", "procedure_name": "Industroyer", "procedure_description": "The"}, {"procedure_id": "S1072", "procedure_name": "Industroyer2", "procedure_description": "can iterate across a device\u2019s IOAs to modify the ON/OFF value of a given IO state."}, {"procedure_id": "M0937", "procedure_name": "Filter Network Traffic", "procedure_description": "Allow/denylists can be used to block access when excessive I/O connections are detected from a system or device during a specified time period."}, {"procedure_id": "M0807", "procedure_name": "Network Allowlists", "procedure_description": "Utilize network allowlists to restrict unnecessary connections to network devices (e.g., comm servers, serial to ethernet converters) and services, especially in cases when devices have limits on the number of simultaneous sessions they support."}, {"procedure_id": "M0930", "procedure_name": "Network Segmentation", "procedure_description": "Segment operational assets and their management devices based on their functional role within the process. Enabling more strict isolation to more critical control and operational information within the control environment."}, {"procedure_id": "M0813", "procedure_name": "Software Process and Device Authentication", "procedure_description": "Devices should authenticate all messages between master and outstation assets."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "DS0040", "procedure_name": "Operational Databases", "procedure_description": ""}]},
{"technique_id": "T0802", "technique_name": "Automated Collection", "technique_description": "Adversaries may automate collection of industrial environment information using tools or scripts. This automated collection may leverage native control protocols and tools available in the control systems environment. For example, the OPC protocol may be used to enumerate and gather information. Access to a system or interface with these native protocols may allow collection and enumeration of other attached, communicating servers and devices.", "technique_url": "https://attack.mitre.org/techniques/T0802", "procedure_examples": [{"procedure_id": "S0093", "procedure_name": "Backdoor.Oldrea", "procedure_description": "Using OPC, a component of"}, {"procedure_id": "S0604", "procedure_name": "Industroyer", "procedure_description": "automatically collects protocol object data to learn about control devices in the environment."}, {"procedure_id": "S1072", "procedure_name": "Industroyer2", "procedure_description": "leverages a hardcoded list of remote-station IP addresses to iteratively initiate communications and collect information across multiple priority IEC-104 priority levels."}, {"procedure_id": "M0807", "procedure_name": "Network Allowlists", "procedure_description": "Utilize network allowlists to restrict unnecessary connections to network devices (e.g., comm servers, serial to ethernet converters) and services, especially in cases when devices have limits on the number of simultaneous sessions they support."}, {"procedure_id": "M0930", "procedure_name": "Network Segmentation", "procedure_description": "Prevent unauthorized systems from accessing control servers or field devices containing industrial information, especially services used for common automation protocols (e.g., DNP3, OPC)."}, {"procedure_id": "DS0017", "procedure_name": "Command", "procedure_description": ""}, {"procedure_id": "DS0022", "procedure_name": "File", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "DS0012", "procedure_name": "Script", "procedure_description": ""}]},
{"technique_id": "T0856", "technique_name": "Spoof Reporting Message", "technique_description": "Adversaries may spoof reporting messages in control system environments for evasion and to impair process control. In control systems, reporting messages contain telemetry data (e.g., I/O values) pertaining to the current state of equipment and the industrial process. Reporting messages are important for monitoring the normal operation of a system or identifying important events such as deviations from expected values.", "technique_url": "https://attack.mitre.org/techniques/T0856", "procedure_examples": [{"procedure_id": "C0020", "procedure_name": "Maroochy Water Breach", "procedure_description": "In the"}, {"procedure_id": "M0802", "procedure_name": "Communication Authenticity", "procedure_description": "Protocols used for control functions should provide authenticity through MAC functions or digital signatures. If not, utilize bump-in-the-wire devices or VPNs to enforce communication authenticity between devices that are not capable of supporting this (e.g., legacy controllers, RTUs)."}, {"procedure_id": "M0937", "procedure_name": "Filter Network Traffic", "procedure_description": "Perform inline allowlisting of automation protocol commands  to prevent devices from sending unauthorized command or reporting messages. Allow/denylist techniques need to be designed with sufficient accuracy to prevent the unintended blocking of valid reporting messages."}, {"procedure_id": "M0807", "procedure_name": "Network Allowlists", "procedure_description": "Use host-based allowlists to prevent devices from accepting connections from unauthorized systems. For example, allowlists can be used to ensure devices can only connect with master stations or known management/engineering workstations."}, {"procedure_id": "M0930", "procedure_name": "Network Segmentation", "procedure_description": "Segment operational assets and their management devices based on their functional role within the process. Enabling more strict isolation to more critical control and operational information within the control environment."}, {"procedure_id": "M0813", "procedure_name": "Software Process and Device Authentication", "procedure_description": "Devices should authenticate all messages between master and outstation assets."}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}, {"procedure_id": "DS0040", "procedure_name": "Operational Databases", "procedure_description": ""}, {"procedure_id": "DS0024", "procedure_name": "Windows Registry", "procedure_description": ""}]},
{"technique_id": "T0839", "technique_name": "Module Firmware", "technique_description": "Adversaries may install malicious or vulnerable firmware onto modular hardware devices. Control system devices often contain modular hardware devices. These devices may have their own set of firmware that is separate from the firmware of the main control system equipment.", "technique_url": "https://attack.mitre.org/techniques/T0839", "procedure_examples": [{"procedure_id": "M0801", "procedure_name": "Access Management", "procedure_description": "All devices or systems changes, including all administrative functions, should require authentication. Consider using access management technologies to enforce authorization on all management interface access attempts, especially when the device does not inherently provide strong authentication and authorization functions."}, {"procedure_id": "M0947", "procedure_name": "Audit", "procedure_description": "Perform integrity checks of firmware before uploading it on a device. Utilize cryptographic hashes to verify the firmware has not been tampered with by comparing it to a trusted hash of the firmware. This could be from trusted data sources (e.g., vendor site) or through a third-party verification service."}, {"procedure_id": "M0946", "procedure_name": "Boot Integrity", "procedure_description": "Check the integrity of the existing BIOS or EFI to determine if it is vulnerable to modification. Use Trusted Platform Module technology."}, {"procedure_id": "M0945", "procedure_name": "Code Signing", "procedure_description": "Devices should verify that firmware has been properly signed by the vendor before allowing installation."}, {"procedure_id": "M0802", "procedure_name": "Communication Authenticity", "procedure_description": "Protocols used for device management should authenticate all network messages to prevent unauthorized system changes."}, {"procedure_id": "M0808", "procedure_name": "Encrypt Network Traffic", "procedure_description": "The encryption of firmware should be considered to prevent adversaries from identifying possible vulnerabilities within the firmware."}, {"procedure_id": "M0941", "procedure_name": "Encrypt Sensitive Information", "procedure_description": "The encryption of firmware should be considered to prevent adversaries from identifying possible vulnerabilities within the firmware."}, {"procedure_id": "M0937", "procedure_name": "Filter Network Traffic", "procedure_description": "Filter for protocols and payloads associated with firmware activation or updating activity."}, {"procedure_id": "M0804", "procedure_name": "Human User Authentication", "procedure_description": "Devices that allow remote management of firmware should require authentication before allowing any changes. The authentication mechanisms should also support"}, {"procedure_id": "M0807", "procedure_name": "Network Allowlists", "procedure_description": "Use host-based allowlists to prevent devices from accepting connections from unauthorized systems. For example, allowlists can be used to ensure devices can only connect with master stations or known management/engineering workstations."}, {"procedure_id": "M0930", "procedure_name": "Network Segmentation", "procedure_description": "Segment operational network and systems to restrict access to critical system functions to predetermined management systems."}, {"procedure_id": "M0813", "procedure_name": "Software Process and Device Authentication", "procedure_description": "Authenticate connections fromsoftware and devices to prevent unauthorized systems from accessing protected management functions."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}, {"procedure_id": "DS0001", "procedure_name": "Firmware", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "DS0040", "procedure_name": "Operational Databases", "procedure_description": ""}]},
{"technique_id": "T0872", "technique_name": "Indicator Removal on Host", "technique_description": "Adversaries may attempt to remove indicators of their presence on a system in an effort to cover their tracks. In cases where an adversary may feel detection is imminent, they may try to overwrite, delete, or cover up changes they have made to the device.", "technique_url": "https://attack.mitre.org/techniques/T0872", "procedure_examples": [{"procedure_id": "S0607", "procedure_name": "KillDisk", "procedure_description": "deletes application, security, setup, and system event logs from Windows systems."}, {"procedure_id": "S1009", "procedure_name": "Triton", "procedure_description": "would reset the controller to the previous state over TriStation and if this failed it would write a dummy program to memory in what was likely an attempt at anti-forensics."}, {"procedure_id": "C0030", "procedure_name": "Triton Safety Instrumented System Attack", "procedure_description": "In the"}, {"procedure_id": "M0922", "procedure_name": "Restrict File and Directory Permissions", "procedure_description": "Protect files stored locally with proper permissions to limit opportunities for adversaries to remove indicators of their activity on the system."}, {"procedure_id": "DS0017", "procedure_name": "Command", "procedure_description": ""}, {"procedure_id": "DS0022", "procedure_name": "File", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}, {"procedure_id": "DS0009", "procedure_name": "Process", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}, {"procedure_id": "DS0024", "procedure_name": "Windows Registry", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}]},
{"technique_id": "T0820", "technique_name": "Exploitation for Evasion", "technique_description": "Adversaries may exploit a software vulnerability to take advantage of a programming error in a program, service, or within the operating system software or kernel itself to evade detection. Vulnerabilities may exist in software that can be used to disable or circumvent security features.", "technique_url": "https://attack.mitre.org/techniques/T0820", "procedure_examples": [{"procedure_id": "S1009", "procedure_name": "Triton", "procedure_description": "disables a firmware RAM/ROM consistency check after injects a payload (imain.bin) into the firmware memory region."}, {"procedure_id": "M0948", "procedure_name": "Application Isolation and Sandboxing", "procedure_description": "Make it difficult for adversaries to advance their operation through exploitation of undiscovered or unpatched vulnerabilities by using sandboxing. Other types of virtualization and application microsegmentation may also mitigate the impact of some types of exploitation. Risks of additional exploits and weaknesses in these systems may still exist."}, {"procedure_id": "M0950", "procedure_name": "Exploit Protection", "procedure_description": "Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior."}, {"procedure_id": "M0919", "procedure_name": "Threat Intelligence Program", "procedure_description": "Develop a robust cyber threat intelligence capability to determine what types and levels of threat may use software exploits and 0-days against a particular organization."}, {"procedure_id": "M0951", "procedure_name": "Update Software", "procedure_description": "Update software regularly by employing patch management for internal enterprise endpoints and servers."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}]},
{"technique_id": "T0836", "technique_name": "Modify Parameter", "technique_description": "Adversaries may modify parameters used to instruct industrial control system devices. These devices operate via programs that dictate how and when to perform actions based on such parameters. Such parameters can determine the extent to which an action is performed and may specify additional options. For example, a program on a control system device dictating motor processes may take a parameter defining the total number of seconds to run that motor.", "technique_url": "https://attack.mitre.org/techniques/T0836", "procedure_examples": [{"procedure_id": "S1045", "procedure_name": "INCONTROLLER", "procedure_description": "can use the HTTP CGI scripts on Omron PLCs to modify parameters on EtherCat connected servo drives."}, {"procedure_id": "S1072", "procedure_name": "Industroyer2", "procedure_description": "modifies specified Information Object Addresses (IOAs) for specified Application Service Data Unit (ASDU) addresses to either the ON or OFF state."}, {"procedure_id": "C0020", "procedure_name": "Maroochy Water Breach", "procedure_description": "In the"}, {"procedure_id": "S0603", "procedure_name": "Stuxnet", "procedure_description": "In states 3 and 4"}, {"procedure_id": "M0947", "procedure_name": "Audit", "procedure_description": "Provide the ability to verify the integrity and authenticity of changes to parameter values."}, {"procedure_id": "M0800", "procedure_name": "Authorization Enforcement", "procedure_description": "All field controllers should restrict the modification of parameter values to only certain users (e.g., engineers, field technician), preferably through implementing a role-based access mechanism. They should also restrict online edits and enable write protection for parameters."}, {"procedure_id": "M0804", "procedure_name": "Human User Authentication", "procedure_description": "All field controllers should require that user authenticate for all remote or local management sessions. The authentication mechanisms should also support Account Use Policies,\u00a0Password Policies, and\u00a0User Account Management."}, {"procedure_id": "M0818", "procedure_name": "Validate Program Inputs", "procedure_description": "Devices and programs should validate the content of any remote parameter changes, including those from HMIs, control servers, or engineering workstations."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}, {"procedure_id": "DS0039", "procedure_name": "Asset", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "DS0040", "procedure_name": "Operational Databases", "procedure_description": ""}]},
{"technique_id": "T0884", "technique_name": "Connection Proxy", "technique_description": "Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications.", "technique_url": "https://attack.mitre.org/techniques/T0884", "procedure_examples": [{"procedure_id": "C0028", "procedure_name": "2015 Ukraine Electric Power Attack", "procedure_description": "During the"}, {"procedure_id": "S1045", "procedure_name": "INCONTROLLER", "procedure_description": "The"}, {"procedure_id": "S0604", "procedure_name": "Industroyer", "procedure_description": "attempts to connect with a hardcoded internal proxy on TCP 3128 [default Squid proxy]. If established, the backdoor attempts to reach an external C2 server via the internal proxy."}, {"procedure_id": "G0034", "procedure_name": "Sandworm Team", "procedure_description": "establishes an internal proxy prior to the installation of backdoors within the network."}, {"procedure_id": "M0937", "procedure_name": "Filter Network Traffic", "procedure_description": "Traffic to known anonymity networks and C2 infrastructure can be blocked through the use of network allow and block lists. It should be noted that this kind of blocking may be circumvented by other techniques likeDomain Fronting."}, {"procedure_id": "M0807", "procedure_name": "Network Allowlists", "procedure_description": "Network allowlists can be implemented through either host-based files or system host files to specify what external connections (e.g., IP address, MAC address, port, protocol) can be made from a device. Allowlist techniques that operate at the application layer (e.g., DNP3, Modbus, HTTP) are addressed in the"}, {"procedure_id": "M0931", "procedure_name": "Network Intrusion Prevention", "procedure_description": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific C2 protocol used by a particular adversary or tool and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools."}, {"procedure_id": "M0920", "procedure_name": "SSL/TLS Inspection", "procedure_description": "If it is possible to inspect HTTPS traffic, the captures can be analyzed for connections that appear to be domain fronting."}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}]},
{"technique_id": "T0885", "technique_name": "Commonly Used Port", "technique_description": "Adversaries may communicate over a commonly used port to bypass firewalls or network detection systems and to blend in with normal network activity, to avoid more detailed inspection. They may use the protocol associated with the port, or a completely different protocol. They may use commonly open ports, such as the examples provided below.", "technique_url": "https://attack.mitre.org/techniques/T0885", "procedure_examples": [{"procedure_id": "C0028", "procedure_name": "2015 Ukraine Electric Power Attack", "procedure_description": "During the"}, {"procedure_id": "S0603", "procedure_name": "Stuxnet", "procedure_description": "attempts to contact command and control servers on port 80 to send basic information about the computer it has compromised."}, {"procedure_id": "S1009", "procedure_name": "Triton", "procedure_description": "uses TriStations default UDP port, 1502, to communicate with devices."}, {"procedure_id": "M0942", "procedure_name": "Disable or Remove Feature or Program", "procedure_description": "Ensure that unnecessary ports and services are closed to prevent risk of discovery and potential exploitation."}, {"procedure_id": "M0804", "procedure_name": "Human User Authentication", "procedure_description": "All field controllers should require users to authenticate for all remote or local management sessions. The authentication mechanisms should also support"}, {"procedure_id": "M0931", "procedure_name": "Network Intrusion Prevention", "procedure_description": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific protocol used by a particular adversary or tool and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools."}, {"procedure_id": "M0930", "procedure_name": "Network Segmentation", "procedure_description": "Configure internal and external firewalls to block traffic using common ports that associate to network protocols that may be unnecessary for that particular network segment."}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}]},
{"technique_id": "T0894", "technique_name": "System Binary Proxy Execution", "technique_description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system.  Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands. Similarly, on Linux systems adversaries may abuse trusted binaries such as split to proxy execution of malicious commands.", "technique_url": "https://attack.mitre.org/techniques/T0894", "procedure_examples": [{"procedure_id": "C0034", "procedure_name": "2022 Ukraine Electric Power Attack", "procedure_description": "During the"}, {"procedure_id": "M0938", "procedure_name": "Execution Prevention", "procedure_description": "Disallow the execution of applications/programs which are not required for normal system functions, including any specific command-line arguments which may allow the execution of proxy commands or application binaries."}, {"procedure_id": "DS0017", "procedure_name": "Command", "procedure_description": ""}, {"procedure_id": "DS0009", "procedure_name": "Process", "procedure_description": ""}, {"procedure_id": "DS0012", "procedure_name": "Script", "procedure_description": ""}]},
{"technique_id": "T0849", "technique_name": "Masquerading", "technique_description": "Adversaries may use masquerading to disguise a malicious application or executable as another file, to avoid operator and engineer suspicion. Possible disguises of these masquerading files can include commonly found programs, expected vendor executables and configuration files, and other commonplace application and naming conventions. By impersonating expected and vendor-relevant files and applications, operators and engineers may not notice the presence of the underlying malicious content and possibly end up running those masquerading as legitimate functions.", "technique_url": "https://attack.mitre.org/techniques/T0849", "procedure_examples": [{"procedure_id": "C0025", "procedure_name": "2016 Ukraine Electric Power Attack", "procedure_description": "During the"}, {"procedure_id": "S0605", "procedure_name": "EKANS", "procedure_description": "masquerades itself as a valid executable with the filename update.exe. Many valid programs use the process name update.exe to perform background software updates."}, {"procedure_id": "S0496", "procedure_name": "REvil", "procedure_description": "searches for whether the Ahnlab autoup.exe service is running on the target system and injects its payload into this existing process."}, {"procedure_id": "S0603", "procedure_name": "Stuxnet", "procedure_description": "renames s7otbxdx.dll, a dll responsible for handling communications with a PLC. It replaces this dll file with its own version that allows it to intercept any calls that are made to access the PLC."}, {"procedure_id": "S1009", "procedure_name": "Triton", "procedure_description": "'s injector, inject.bin, masquerades as a standard compiled PowerPC program for the Tricon."}, {"procedure_id": "M0945", "procedure_name": "Code Signing", "procedure_description": "Require signed binaries."}, {"procedure_id": "M0938", "procedure_name": "Execution Prevention", "procedure_description": "Use tools that restrict program execution via application control by attributes other than file name for common system and application utilities."}, {"procedure_id": "M0922", "procedure_name": "Restrict File and Directory Permissions", "procedure_description": "Use file system access controls to protect system and application folders."}, {"procedure_id": "DS0017", "procedure_name": "Command", "procedure_description": ""}, {"procedure_id": "DS0022", "procedure_name": "File", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}, {"procedure_id": "DS0009", "procedure_name": "Process", "procedure_description": ""}, {"procedure_id": "DS0003", "procedure_name": "Scheduled Job", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}, {"procedure_id": "DS0019", "procedure_name": "Service", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}]},
{"technique_id": "T0842", "technique_name": "Network Sniffing", "technique_description": "Network sniffing is the practice of using a network interface on a computer system to monitor or capture information  regardless of whether it is the specified destination for the information.", "technique_url": "https://attack.mitre.org/techniques/T0842", "procedure_examples": [{"procedure_id": "S1045", "procedure_name": "INCONTROLLER", "procedure_description": "can deploy Tcpdump to sniff network traffic and collect PCAP files."}, {"procedure_id": "S0603", "procedure_name": "Stuxnet", "procedure_description": "DP_RECV is the name of a standard function block used by network coprocessors. It is used to receive network frames on the Profibus  a standard industrial network bus used for distributed I/O. The original block is copied to FC1869, and then replaced by a malicious block. Each time the function is used to receive a packet, the malicious"}, {"procedure_id": "S1010", "procedure_name": "VPNFilter", "procedure_description": "The"}, {"procedure_id": "M0808", "procedure_name": "Encrypt Network Traffic", "procedure_description": "Ensure that wired and/or wireless traffic is encrypted when feasible. Use best practices for authentication protocols, such as Kerberos, and ensure web traffic that may contain credentials is protected by SSL/TLS."}, {"procedure_id": "M0932", "procedure_name": "Multi-factor Authentication", "procedure_description": "Use multi-factor authentication wherever possible."}, {"procedure_id": "M0930", "procedure_name": "Network Segmentation", "procedure_description": "Segment networks and systems appropriately to reduce access to critical system and services communications."}, {"procedure_id": "M0926", "procedure_name": "Privileged Account Management", "procedure_description": "Restrict root or administrator access on user accounts to limit the ability to capture promiscuous traffic on a network through common packet capture tools."}, {"procedure_id": "M0814", "procedure_name": "Static Network Configuration", "procedure_description": "Statically defined ARP entries can prevent manipulation and sniffing of switched network traffic, as some AiTM techniques depend on sending spoofed ARP messages to manipulate network host's dynamic ARP tables."}, {"procedure_id": "DS0017", "procedure_name": "Command", "procedure_description": ""}, {"procedure_id": "DS0009", "procedure_name": "Process", "procedure_description": ""}]},
{"technique_id": "T0858", "technique_name": "Change Operating Mode", "technique_description": "Adversaries may change the operating mode of a controller to gain additional access to engineering functions such as Program Download.   Programmable controllers typically have several modes of operation that control the state of the user program and control access to the controllers API. Operating modes can be physically selected using a key switch on the face of the controller but may also be selected with calls to the controllers API. Operating modes and the mechanisms by which they are selected often vary by vendor and product line. Some commonly implemented operating modes are described below:", "technique_url": "https://attack.mitre.org/techniques/T0858", "procedure_examples": [{"procedure_id": "S1045", "procedure_name": "INCONTROLLER", "procedure_description": "can establish a remote HTTP connection to change the operating mode of Omron PLCs."}, {"procedure_id": "S1006", "procedure_name": "PLC-Blaster", "procedure_description": "stops the execution of the user program on the target to enable the transfer of its own code. The worm then copies itself to the target and subsequently starts the target PLC again."}, {"procedure_id": "S1009", "procedure_name": "Triton", "procedure_description": "has the ability to halt or run a program through the TriStation protocol. TsHi.py contains instances of halt and run functions being executed."}, {"procedure_id": "M0801", "procedure_name": "Access Management", "procedure_description": "Authenticate all access to field controllers before authorizing access to, or modification of, a device's state, logic, or programs. Centralized authentication techniques can help manage the large number of field controller accounts needed across the ICS."}, {"procedure_id": "M0800", "procedure_name": "Authorization Enforcement", "procedure_description": "All field controllers should restrict operating mode changes to only required authenticated users (e.g., engineers, field technicians), preferably through implementing a role-based access mechanism. Further, physical mechanisms (e.g., keys) can also be used to limit unauthorized operating mode changes."}, {"procedure_id": "M0802", "procedure_name": "Communication Authenticity", "procedure_description": "Protocols used for device management should authenticate all network messages to prevent unauthorized system changes."}, {"procedure_id": "M0804", "procedure_name": "Human User Authentication", "procedure_description": "All field controllers should require users to authenticate for all remote or local management sessions. The authentication mechanisms should also support"}, {"procedure_id": "M0807", "procedure_name": "Network Allowlists", "procedure_description": "Use host-based allowlists to prevent devices from accepting connections from unauthorized systems. For example, allowlists can be used to ensure devices can only connect with master stations or known management/engineering workstations."}, {"procedure_id": "M0930", "procedure_name": "Network Segmentation", "procedure_description": "Segment operational network and systems to restrict access to critical system functions to predetermined management systems."}, {"procedure_id": "M0813", "procedure_name": "Software Process and Device Authentication", "procedure_description": "Authenticate connections fromsoftware and devices to prevent unauthorized systems from accessing protected management functions."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "DS0040", "procedure_name": "Operational Databases", "procedure_description": ""}]},
{"technique_id": "T0840", "technique_name": "Network Connection Enumeration", "technique_description": "Adversaries may perform network connection enumeration to discover information about device communication patterns. If an adversary can inspect the state of a network connection with tools, such as Netstat, in conjunction with", "technique_url": "https://attack.mitre.org/techniques/T0840", "procedure_examples": [{"procedure_id": "S0605", "procedure_name": "EKANS", "procedure_description": "performs a DNS lookup of an internal domain name associated with its target network to identify if it was deployed on the intended system."}, {"procedure_id": "S0604", "procedure_name": "Industroyer", "procedure_description": "contains an IEC 61850 module that enumerates all connected network adapters to determine their TCP/IP subnet masks."}, {"procedure_id": "M0816", "procedure_name": "Mitigation Limited or Not Effective", "procedure_description": "Network connection enumeration is likely obtained by using common system tools (e.g., netstat, ipconfig)."}, {"procedure_id": "DS0017", "procedure_name": "Command", "procedure_description": ""}, {"procedure_id": "DS0009", "procedure_name": "Process", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}, {"procedure_id": "DS0012", "procedure_name": "Script", "procedure_description": ""}]},
{"technique_id": "T0859", "technique_name": "Valid Accounts", "technique_description": "Adversaries may steal the credentials of a specific user or service account using credential access techniques. In some cases, default credentials for control system devices may be publicly available. Compromised credentials may be used to bypass access controls placed on various resources on hosts and within the network, and may even be used for persistent access to remote systems. Compromised and default credentials may also grant an adversary increased privilege to specific systems and devices or access to restricted areas of the network. Adversaries may choose not to use malware or tools, in conjunction with the legitimate access those credentials provide, to make it harder to detect their presence or to control devices and send legitimate commands in an unintended way.", "technique_url": "https://attack.mitre.org/techniques/T0859", "procedure_examples": [{"procedure_id": "C0028", "procedure_name": "2015 Ukraine Electric Power Attack", "procedure_description": "During the"}, {"procedure_id": "C0025", "procedure_name": "2016 Ukraine Electric Power Attack", "procedure_description": "During the"}, {"procedure_id": "G1000", "procedure_name": "ALLANITE", "procedure_description": "utilized credentials collected through phishing and watering hole attacks."}, {"procedure_id": "S0089", "procedure_name": "BlackEnergy", "procedure_description": "utilizes valid user and administrator credentials, in addition to creating new administrator accounts to maintain presence."}, {"procedure_id": "S1045", "procedure_name": "INCONTROLLER", "procedure_description": "can brute force password-based authentication to Schneider PLCs over  the CODESYS protocol (UDP port 1740)."}, {"procedure_id": "G0049", "procedure_name": "OilRig", "procedure_description": "utilized stolen credentials to gain access to victim machines."}, {"procedure_id": "C0030", "procedure_name": "Triton Safety Instrumented System Attack", "procedure_description": "In the"}, {"procedure_id": "M0801", "procedure_name": "Access Management", "procedure_description": "Authenticate all access to field controllers before authorizing access to, or modification of, a device's state, logic, or programs. Centralized authentication techniques can help manage the large number of field controller accounts needed across the ICS."}, {"procedure_id": "M0936", "procedure_name": "Account Use Policies", "procedure_description": "Configure features related to account use like login attempt lockouts, specific login times, and password strength requirements as examples. Consider these features as they relate to assets which may impact safety and availability."}, {"procedure_id": "M0915", "procedure_name": "Active Directory Configuration", "procedure_description": "Consider configuration and use of a network-wide authentication service such as Active Directory, LDAP, or RADIUS capabilities which can be found in ICS devices."}, {"procedure_id": "M0913", "procedure_name": "Application Developer Guidance", "procedure_description": "Ensure that applications and devices do not store sensitive data or credentials insecurely (e.g., plaintext credentials in code, published credentials in repositories, or credentials in public cloud storage)."}, {"procedure_id": "M0947", "procedure_name": "Audit", "procedure_description": "Routinely audit source code, application configuration files, open repositories, and public cloud storage for insecure use and storage of credentials."}, {"procedure_id": "M0937", "procedure_name": "Filter Network Traffic", "procedure_description": "Consider using IP allowlisting along with user account management to ensure that data access is restricted not only to valid users but only from expected IP ranges to mitigate the use of stolen credentials to access data."}, {"procedure_id": "M0932", "procedure_name": "Multi-factor Authentication", "procedure_description": "Integrating multi-factor authentication (MFA) as part of organizational policy can greatly reduce the risk of an adversary gaining access to valid credentials that may be used for additional tactics such as initial access, lateral movement, and collecting information. MFA can also be used to restrict access to cloud resources and APIs."}, {"procedure_id": "M0927", "procedure_name": "Password Policies", "procedure_description": "Applications and appliances that utilize default username and password should be changed immediately after the installation, and before deployment to a production environment."}, {"procedure_id": "M0926", "procedure_name": "Privileged Account Management", "procedure_description": "Audit domain and local accounts and their permission levels routinely to look for situations that could allow an adversary to gain system wide access with stolen privileged account credentials."}, {"procedure_id": "M0918", "procedure_name": "User Account Management", "procedure_description": "Ensure users and user groups have appropriate permissions for their roles through Identity and Access Management (IAM) controls. Implement strict IAM controls to prevent access to systems except for the applications, users, and services that require access. Implement user accounts for each individual for enforcement and non-repudiation of actions."}, {"procedure_id": "DS0028", "procedure_name": "Logon Session", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}, {"procedure_id": "DS0002", "procedure_name": "User Account", "procedure_description": ""}]},
{"technique_id": "T0886", "technique_name": "Remote Services", "technique_description": "Adversaries may leverage remote services to move between assets and network segments. These services are often used to allow operators to interact with systems remotely within the network, some examples are RDP, SMB, SSH, and other similar mechanisms.", "technique_url": "https://attack.mitre.org/techniques/T0886", "procedure_examples": [{"procedure_id": "C0028", "procedure_name": "2015 Ukraine Electric Power Attack", "procedure_description": "During the"}, {"procedure_id": "C0025", "procedure_name": "2016 Ukraine Electric Power Attack", "procedure_description": "During the"}, {"procedure_id": "S1045", "procedure_name": "INCONTROLLER", "procedure_description": "can use the CODESYS protocol to remotely connect to Schneider PLCs and perform maintenance functions on the device."}, {"procedure_id": "S0496", "procedure_name": "REvil", "procedure_description": "uses the SMB protocol to encrypt files located on remotely connected file shares."}, {"procedure_id": "S0603", "procedure_name": "Stuxnet", "procedure_description": "executes malicious SQL commands in the WinCC database server to propagate to remote systems. The malicious SQL commands include xp_cmdshell, sp_dumpdbilog, and sp_addextendedproc."}, {"procedure_id": "C0030", "procedure_name": "Triton Safety Instrumented System Attack", "procedure_description": "In the"}, {"procedure_id": "M0801", "procedure_name": "Access Management", "procedure_description": "Access Management technologies can help enforce authentication on critical remote service, examples include, but are not limited to, device management services (e.g., telnet, SSH), data access servers (e.g., HTTP, Historians), and HMI sessions (e.g., RDP, VNC)."}, {"procedure_id": "M0800", "procedure_name": "Authorization Enforcement", "procedure_description": "Provide privileges corresponding to the restriction of a GUI session to control system operations (examples include HMI read-only vs. read-write modes). Ensure local users, such as operators and engineers, are giving prioritization over remote sessions and have the authority to regain control over a remote session if needed. Prevent remote access sessions (e.g., RDP, VNC) from taking over local sessions, especially those used for ICS control, especially HMIs."}, {"procedure_id": "M0937", "procedure_name": "Filter Network Traffic", "procedure_description": "Filter application-layer protocol messages for remote services to block any unauthorized activity."}, {"procedure_id": "M0804", "procedure_name": "Human User Authentication", "procedure_description": "All remote services should require strong authentication before providing user access."}, {"procedure_id": "M0807", "procedure_name": "Network Allowlists", "procedure_description": "Network allowlists can be implemented through either host-based files or system host files to specify what external connections (e.g., IP address, MAC address, port, protocol) can be made from a device."}, {"procedure_id": "M0930", "procedure_name": "Network Segmentation", "procedure_description": "Segment and control software movement between business and OT environments by way of one directional DMZs. Web access should be restricted from the OT environment. Engineering workstations, including transient cyber assets (TCAs) should have minimal connectivity to external networks, including Internet and email, further limit the extent to which these devices are dual-homed to multiple networks."}, {"procedure_id": "M0927", "procedure_name": "Password Policies", "procedure_description": "Enforce strong password requirements to prevent password brute force methods for lateral movement."}, {"procedure_id": "M0813", "procedure_name": "Software Process and Device Authentication", "procedure_description": "All communication sessions to remote services should be authenticated to prevent unauthorized access."}, {"procedure_id": "M0918", "procedure_name": "User Account Management", "procedure_description": "Limit the accounts that may use remote services. Limit the permissions for accounts that are at higher risk of compromise; for example, configure SSH so users can only run specific programs."}, {"procedure_id": "DS0017", "procedure_name": "Command", "procedure_description": ""}, {"procedure_id": "DS0028", "procedure_name": "Logon Session", "procedure_description": ""}, {"procedure_id": "DS0011", "procedure_name": "Module", "procedure_description": ""}, {"procedure_id": "DS0033", "procedure_name": "Network Share", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}, {"procedure_id": "DS0009", "procedure_name": "Process", "procedure_description": ""}]},
{"technique_id": "T0867", "technique_name": "Lateral Tool Transfer", "technique_description": "Adversaries may transfer tools or other files from one system to another to stage adversary tools or other files over the course of an operation.  Copying of files may also be performed laterally between internal victim systems to support Lateral Movement with remote Execution using inherent file sharing protocols such as file sharing over SMB to connected network shares.", "technique_url": "https://attack.mitre.org/techniques/T0867", "procedure_examples": [{"procedure_id": "C0028", "procedure_name": "2015 Ukraine Electric Power Attack", "procedure_description": "During the"}, {"procedure_id": "C0025", "procedure_name": "2016 Ukraine Electric Power Attack", "procedure_description": "During the"}, {"procedure_id": "S0606", "procedure_name": "Bad Rabbit", "procedure_description": "can move laterally through industrial networks by means of the SMB service."}, {"procedure_id": "S1045", "procedure_name": "INCONTROLLER", "procedure_description": "can use a Telnet session to load a malware implant on Omron PLCs."}, {"procedure_id": "S0368", "procedure_name": "NotPetya", "procedure_description": "can move laterally through industrial networks by means of the SMB service."}, {"procedure_id": "S0603", "procedure_name": "Stuxnet", "procedure_description": "sends an SQL statement that creates a table and inserts a binary value into the table. The binary value is a hex string representation of the main Stuxnet DLL as an executable file (formed using resource 210) and an updated configuration data block."}, {"procedure_id": "C0030", "procedure_name": "Triton Safety Instrumented System Attack", "procedure_description": "In the"}, {"procedure_id": "S0366", "procedure_name": "WannaCry", "procedure_description": "can move laterally through industrial networks by means of the SMB service."}, {"procedure_id": "M0931", "procedure_name": "Network Intrusion Prevention", "procedure_description": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known tools and protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools."}, {"procedure_id": "DS0017", "procedure_name": "Command", "procedure_description": ""}, {"procedure_id": "DS0022", "procedure_name": "File", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}, {"procedure_id": "DS0033", "procedure_name": "Network Share", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}, {"procedure_id": "DS0009", "procedure_name": "Process", "procedure_description": ""}]},
{"technique_id": "T0892", "technique_name": "Change Credential", "technique_description": "Adversaries may modify software and device credentials to prevent operator and responder access. Depending on the device, the modification or addition of this password could prevent any device configuration actions from being accomplished and may require a factory reset or replacement of hardware. These credentials are often built-in features provided by the device vendors as a means to restrict access to management interfaces.", "technique_url": "https://attack.mitre.org/techniques/T0892", "procedure_examples": [{"procedure_id": "M0953", "procedure_name": "Data Backup", "procedure_description": "Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.  Maintain and exercise incident response plans"}, {"procedure_id": "M0927", "procedure_name": "Password Policies", "procedure_description": "Applications and appliances that utilize default username and password should be changed immediately after the installation, and before deployment to a production environment."}, {"procedure_id": "M0811", "procedure_name": "Redundancy of Service", "procedure_description": "Retain cold-standby or replacement hardware of similar models to ensure continued operations of critical functions if the primary system is compromised or unavailable."}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "DS0040", "procedure_name": "Operational Databases", "procedure_description": ""}]},
{"technique_id": "T0804", "technique_name": "Block Reporting Message", "technique_description": "Adversaries may block or prevent a reporting message from reaching its intended target. In control systems, reporting messages contain telemetry data (e.g., I/O values) pertaining to the current state of equipment and the industrial process. By blocking these reporting messages, an adversary can potentially hide their actions from an operator.", "technique_url": "https://attack.mitre.org/techniques/T0804", "procedure_examples": [{"procedure_id": "C0028", "procedure_name": "2015 Ukraine Electric Power Attack", "procedure_description": "During the"}, {"procedure_id": "S0604", "procedure_name": "Industroyer", "procedure_description": "uses the first COM port from the configuration file for the communication and the other two COM ports are opened to prevent other processes accessing them. This may block processes or operators from getting reporting messages from a device."}, {"procedure_id": "M0807", "procedure_name": "Network Allowlists", "procedure_description": "Utilize network allowlists to restrict unnecessary connections to network devices (e.g., comm servers, serial to ethernet converters) and services, especially in cases when devices have limits on the number of simultaneous sessions they support."}, {"procedure_id": "M0810", "procedure_name": "Out-of-Band Communications Channel", "procedure_description": "Provide an alternative method for sending critical report messages to operators, this could include using radio/cell communication to obtain messages from field technicians that can locally obtain telemetry and status data."}, {"procedure_id": "M0814", "procedure_name": "Static Network Configuration", "procedure_description": "Unauthorized connections can be prevented by statically defining the hosts and ports used for automation protocol connections."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "DS0040", "procedure_name": "Operational Databases", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}, {"procedure_id": "DS0009", "procedure_name": "Process", "procedure_description": ""}]},
{"technique_id": "T0843", "technique_name": "Program Download", "technique_description": "Adversaries may perform a program download to transfer a user program to a controller.", "technique_url": "https://attack.mitre.org/techniques/T0843", "procedure_examples": [{"procedure_id": "S1045", "procedure_name": "INCONTROLLER", "procedure_description": "can use the CODESYS protocol to download programs to Schneider PLCs."}, {"procedure_id": "S1006", "procedure_name": "PLC-Blaster", "procedure_description": "utilizes the PLC communication and management API to load executable Program Organization Units."}, {"procedure_id": "S0603", "procedure_name": "Stuxnet", "procedure_description": "'s infection sequence consists of code blocks and data blocks that will be downloaded to the PLC to alter its behavior."}, {"procedure_id": "S1009", "procedure_name": "Triton", "procedure_description": "leveraged the TriStation protocol to download programs onto Triconex Safety Instrumented System."}, {"procedure_id": "C0030", "procedure_name": "Triton Safety Instrumented System Attack", "procedure_description": "In the"}, {"procedure_id": "M0801", "procedure_name": "Access Management", "procedure_description": "Authenticate all access to field controllers before authorizing access to, or modification of, a device's state, logic, or programs. Centralized authentication techniques can help manage the large number of field controller accounts needed across the ICS."}, {"procedure_id": "M0947", "procedure_name": "Audit", "procedure_description": "Provide the ability to verify the integrity of programs downloaded on a controller. While techniques like CRCs and checksums are commonly used, they are not cryptographically secure and can be vulnerable to collisions. Preferably cryptographic hash functions (e.g., SHA-2, SHA-3) should be used."}, {"procedure_id": "M0800", "procedure_name": "Authorization Enforcement", "procedure_description": "All field controllers should restrict the download of programs, including online edits and program appends, to only certain users (e.g., engineers, field technician), preferably through implementing a role-based access mechanism."}, {"procedure_id": "M0945", "procedure_name": "Code Signing", "procedure_description": "Utilize code signatures to verify the integrity and authenticity of programs downloaded to the device."}, {"procedure_id": "M0802", "procedure_name": "Communication Authenticity", "procedure_description": "Protocols used for device management should authenticate all network messages to prevent unauthorized system changes."}, {"procedure_id": "M0937", "procedure_name": "Filter Network Traffic", "procedure_description": "Filter for protocols and payloads associated with program download activity to prevent unauthorized device configurations."}, {"procedure_id": "M0804", "procedure_name": "Human User Authentication", "procedure_description": "All field controllers should require users to authenticate for all remote or local management sessions. The authentication mechanisms should also support"}, {"procedure_id": "M0807", "procedure_name": "Network Allowlists", "procedure_description": "Use host-based allowlists to prevent devices from accepting connections from unauthorized systems. For example, allowlists can be used to ensure devices can only connect with master stations or known management/engineering workstations."}, {"procedure_id": "M0930", "procedure_name": "Network Segmentation", "procedure_description": "Segment operational network and systems to restrict access to critical system functions to predetermined management systems."}, {"procedure_id": "M0813", "procedure_name": "Software Process and Device Authentication", "procedure_description": "Authenticate connections from software and devices to prevent unauthorized systems from accessing protected management functions."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}, {"procedure_id": "DS0039", "procedure_name": "Asset", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "DS0040", "procedure_name": "Operational Databases", "procedure_description": ""}]},
{"technique_id": "T0878", "technique_name": "Alarm Suppression", "technique_description": "Adversaries may target protection function alarms to prevent them from notifying operators of critical conditions. Alarm messages may be a part of an overall reporting system and of particular interest for adversaries. Disruption of the alarm system does not imply the disruption of the reporting system as a whole.", "technique_url": "https://attack.mitre.org/techniques/T0878", "procedure_examples": [{"procedure_id": "C0020", "procedure_name": "Maroochy Water Breach", "procedure_description": "In the"}, {"procedure_id": "M0807", "procedure_name": "Network Allowlists", "procedure_description": "Utilize network allowlists to restrict unnecessary connections to network devices (e.g., comm servers, serial to ethernet converters) and services, especially in cases when devices have limits on the number of simultaneous sessions they support."}, {"procedure_id": "M0930", "procedure_name": "Network Segmentation", "procedure_description": "Segment operational assets and their management devices based on their functional role within the process. Enabling more strict isolation to more critical control and operational information within the control environment."}, {"procedure_id": "M0810", "procedure_name": "Out-of-Band Communications Channel", "procedure_description": "Provide an alternative method for alarms to be reported in the event of a communication failure."}, {"procedure_id": "M0814", "procedure_name": "Static Network Configuration", "procedure_description": "Unauthorized connections can be prevented by statically defining the hosts and ports used for automation protocol connections."}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "DS0040", "procedure_name": "Operational Databases", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}]},
{"technique_id": "T0866", "technique_name": "Exploitation of Remote Services", "technique_description": "Adversaries may exploit a software vulnerability to take advantage of a programming error in a program, service, or within the operating system software or kernel itself to enable remote service abuse. A common goal for post-compromise exploitation of remote services is for initial access into and lateral movement throughout the ICS environment to enable access to targeted systems.", "technique_url": "https://attack.mitre.org/techniques/T0866", "procedure_examples": [{"procedure_id": "S0606", "procedure_name": "Bad Rabbit", "procedure_description": "initially infected IT networks, but by means of an exploit (particularly the SMBv1-targeting MS17-010 vulnerability) spread to industrial networks."}, {"procedure_id": "S0368", "procedure_name": "NotPetya", "procedure_description": "initially infected IT networks, but by means of an exploit (particularly the SMBv1-targeting MS17-010 vulnerability) spread to industrial networks."}, {"procedure_id": "S0603", "procedure_name": "Stuxnet", "procedure_description": "executes malicious SQL commands in the WinCC database server to propagate to remote systems. The malicious SQL commands include xp_cmdshell, sp_dumpdbilog, and sp_addextendedproc."}, {"procedure_id": "S0366", "procedure_name": "WannaCry", "procedure_description": "initially infected IT networks, but by means of an exploit (particularly the SMBv1-targeting MS17-010 vulnerability) spread to industrial networks."}, {"procedure_id": "M0948", "procedure_name": "Application Isolation and Sandboxing", "procedure_description": "Make it difficult for adversaries to advance their operation through exploitation of undiscovered or unpatched vulnerabilities by using sandboxing. Other types of virtualization and application microsegmentation may also mitigate the impact of some types of exploitation. Risks of additional exploits and weaknesses in these systems may still exist."}, {"procedure_id": "M0942", "procedure_name": "Disable or Remove Feature or Program", "procedure_description": "Ensure that unnecessary ports and services are closed to prevent risk of discovery and potential exploitation."}, {"procedure_id": "M0950", "procedure_name": "Exploit Protection", "procedure_description": "Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior."}, {"procedure_id": "M0930", "procedure_name": "Network Segmentation", "procedure_description": "Segment networks and systems appropriately to reduce access to critical system and services communications."}, {"procedure_id": "M0926", "procedure_name": "Privileged Account Management", "procedure_description": "Minimize permissions and access for service accounts to limit impact of exploitation."}, {"procedure_id": "M0919", "procedure_name": "Threat Intelligence Program", "procedure_description": "Develop a robust cyber threat intelligence capability to determine what types and levels of threat may use software exploits and 0-days against a particular organization."}, {"procedure_id": "M0951", "procedure_name": "Update Software", "procedure_description": "Update software regularly by employing patch management for internal enterprise endpoints and servers."}, {"procedure_id": "M0916", "procedure_name": "Vulnerability Scanning", "procedure_description": "Regularly scan the internal network for available services to identify new and potentially vulnerable services."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}]},
{"technique_id": "T0891", "technique_name": "Hardcoded Credentials", "technique_description": "Adversaries may leverage credentials that are hardcoded in software or firmware to gain an unauthorized interactive user session to an asset. Examples credentials that may be hardcoded in an asset include:", "technique_url": "https://attack.mitre.org/techniques/T0891", "procedure_examples": [{"procedure_id": "S1045", "procedure_name": "INCONTROLLER", "procedure_description": "can login to Omron PLCs using hardcoded credentials, which is documented in CVE-2022-34151."}, {"procedure_id": "S0603", "procedure_name": "Stuxnet", "procedure_description": "uses a hardcoded password in the WinCC software's database server as one of the mechanisms used to propagate to nearby systems."}, {"procedure_id": "M0801", "procedure_name": "Access Management", "procedure_description": "Ensure embedded controls and network devices are protected through access management, as these devices often have unknown hardcoded accounts which could be used to gain unauthorized access."}, {"procedure_id": "DS0028", "procedure_name": "Logon Session", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}]},
{"technique_id": "T0812", "technique_name": "Default Credentials", "technique_description": "Adversaries may leverage manufacturer or supplier set default credentials on control system devices. These default credentials may have administrative permissions and may be necessary for initial configuration of the device. It is general best practice to change the passwords for these accounts as soon as possible, but some manufacturers may have devices that have passwords or usernames that cannot be changed.", "technique_url": "https://attack.mitre.org/techniques/T0812", "procedure_examples": [{"procedure_id": "C0031", "procedure_name": "Unitronics Defacement Campaign", "procedure_description": "During the"}, {"procedure_id": "M0801", "procedure_name": "Access Management", "procedure_description": "Ensure embedded controls and network devices are protected through access management, as these devices often have unknown default accounts which could be used to gain unauthorized access."}, {"procedure_id": "M0927", "procedure_name": "Password Policies", "procedure_description": "Review vendor documents and security alerts for potentially unknown or overlooked default credentials within existing devices"}, {"procedure_id": "DS0028", "procedure_name": "Logon Session", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}]},
{"technique_id": "T0805", "technique_name": "Block Serial COM", "technique_description": "Adversaries may block access to serial COM to prevent instructions or configurations from reaching target devices. Serial Communication ports (COM) allow communication with control system devices. Devices can receive command and configuration messages over such serial COM. Devices also use serial COM to send command and reporting messages. Blocking device serial COM may also block command messages and block reporting messages.", "technique_url": "https://attack.mitre.org/techniques/T0805", "procedure_examples": [{"procedure_id": "C0028", "procedure_name": "2015 Ukraine Electric Power Attack", "procedure_description": "During the"}, {"procedure_id": "S0604", "procedure_name": "Industroyer", "procedure_description": "In"}, {"procedure_id": "M0807", "procedure_name": "Network Allowlists", "procedure_description": "Implement network allowlists to minimize serial comm port access to only authorized hosts, such as comm servers and RTUs."}, {"procedure_id": "M0930", "procedure_name": "Network Segmentation", "procedure_description": "Restrict unauthorized devices from accessing serial comm ports."}, {"procedure_id": "M0810", "procedure_name": "Out-of-Band Communications Channel", "procedure_description": "Ensure devices have an alternative method for communicating in the event that a valid COM port is unavailable."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "DS0040", "procedure_name": "Operational Databases", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}, {"procedure_id": "DS0009", "procedure_name": "Process", "procedure_description": ""}]},
{"technique_id": "T0800", "technique_name": "Activate Firmware Update Mode", "technique_description": "Adversaries may activate firmware update mode on devices to prevent expected response functions from engaging in reaction to an emergency or process malfunction. For example, devices such as protection relays may have an operation mode designed for firmware installation. This mode may halt process monitoring and related functions to allow new firmware to be loaded. A device left in update mode may be placed in an inactive holding state if no firmware is provided to it. By entering and leaving a device in this mode, the adversary may deny its usual functionalities.", "technique_url": "https://attack.mitre.org/techniques/T0800", "procedure_examples": [{"procedure_id": "S0604", "procedure_name": "Industroyer", "procedure_description": "The"}, {"procedure_id": "M0801", "procedure_name": "Access Management", "procedure_description": "All devices or systems changes, including all administrative functions, should require authentication. Consider using access management technologies to enforce authorization on all management interface access attempts, especially when the device does not inherently provide strong authentication and authorization functions."}, {"procedure_id": "M0800", "procedure_name": "Authorization Enforcement", "procedure_description": "Restrict configurations changes and firmware updating abilities to only authorized individuals."}, {"procedure_id": "M0802", "procedure_name": "Communication Authenticity", "procedure_description": "Protocols used for device management should authenticate all network messages to prevent unauthorized system changes."}, {"procedure_id": "M0937", "procedure_name": "Filter Network Traffic", "procedure_description": "Filter for protocols and payloads associated with firmware activation or updating activity."}, {"procedure_id": "M0804", "procedure_name": "Human User Authentication", "procedure_description": "Devices that allow remote management of firmware should require authentication before allowing any changes. The authentication mechanisms should also support"}, {"procedure_id": "M0807", "procedure_name": "Network Allowlists", "procedure_description": "Use host-based allowlists to prevent devices from accepting connections from unauthorized systems. For example, allowlists can be used to ensure devices can only connect with master stations or known management/engineering workstations."}, {"procedure_id": "M0930", "procedure_name": "Network Segmentation", "procedure_description": "Segment operational network and systems to restrict access to critical system functions to predetermined management systems."}, {"procedure_id": "M0813", "procedure_name": "Software Process and Device Authentication", "procedure_description": "Authenticate connections fromsoftware and devices to prevent unauthorized systems from accessing protected management functions."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "DS0040", "procedure_name": "Operational Databases", "procedure_description": ""}]},
{"technique_id": "T0803", "technique_name": "Block Command Message", "technique_description": "Adversaries may block a command message from reaching its intended target to prevent command execution. In OT networks, command messages are sent to provide instructions to control system devices. A blocked command message can inhibit response functions from correcting a disruption or unsafe condition.", "technique_url": "https://attack.mitre.org/techniques/T0803", "procedure_examples": [{"procedure_id": "C0028", "procedure_name": "2015 Ukraine Electric Power Attack", "procedure_description": "During the"}, {"procedure_id": "S0604", "procedure_name": "Industroyer", "procedure_description": "In"}, {"procedure_id": "M0807", "procedure_name": "Network Allowlists", "procedure_description": "Utilize network allowlists to restrict unnecessary connections to network devices (e.g., comm servers, serial to ethernet converters) and services, especially in cases when devices have limits on the number of simultaneous sessions they support."}, {"procedure_id": "M0810", "procedure_name": "Out-of-Band Communications Channel", "procedure_description": "Provide an alternative method for sending critical commands message to outstations, this could include using radio/cell communication to send messages to a field technician that physically performs the control function."}, {"procedure_id": "M0814", "procedure_name": "Static Network Configuration", "procedure_description": "Unauthorized connections can be prevented by statically defining the hosts and ports used for automation protocol connections."}, {"procedure_id": "DS0015", "procedure_name": "Application Log", "procedure_description": ""}, {"procedure_id": "DS0029", "procedure_name": "Network Traffic", "procedure_description": ""}, {"procedure_id": "DS0040", "procedure_name": "Operational Databases", "procedure_description": ""}, {"procedure_id": "", "procedure_name": "", "procedure_description": ""}, {"procedure_id": "DS0009", "procedure_name": "Process", "procedure_description": ""}]},
{"technique_id": "T0882", "technique_name": "Theft of Operational Information", "technique_description": "Adversaries may steal operational information on a production environment as a direct mission outcome for personal gain or to inform future operations. This information may include design documents, schedules, rotational data, or similar artifacts that provide insight on operations.    In the Bowman Dam incident, adversaries probed systems for operational data.", "technique_url": "https://attack.mitre.org/techniques/T0882", "procedure_examples": [{"procedure_id": "S1000", "procedure_name": "ACAD/Medre.A", "procedure_description": "can collect AutoCad files with drawings. These drawings may contain operational information."}, {"procedure_id": "S0038", "procedure_name": "Duqu", "procedure_description": "'s purpose is to gather intelligence data and assets from entities such as industrial infrastructure and system manufacturers, amongst others not in the industrial sector, in order to more easily conduct a future attack against another third party."}, {"procedure_id": "S0143", "procedure_name": "Flame", "procedure_description": "can collect AutoCAD design data and visio diagrams as well as other documents that may contain operational information."}, {"procedure_id": "S0496", "procedure_name": "REvil", "procedure_description": "sends exfiltrated data from the victims system using HTTPS POST messages sent to the C2 system."}, {"procedure_id": "M0803", "procedure_name": "Data Loss Prevention", "procedure_description": "Apply DLP to protect the confidentiality of information related to operational processes, facility locations, device configurations, programs, or databases that may have information that can be used to infer organizational trade-secrets, recipes, and other intellectual property (IP)."}, {"procedure_id": "M0941", "procedure_name": "Encrypt Sensitive Information", "procedure_description": "Encrypt any operational data with strong confidentiality requirements, including organizational trade-secrets, recipes, and other intellectual property (IP)."}, {"procedure_id": "M0809", "procedure_name": "Operational Information Confidentiality", "procedure_description": "Example mitigations could include minimizing its distribution/storage or obfuscating the information (e.g., facility coverterms, codenames).  In many cases this information may be necessary to support critical engineering, maintenance, or operational functions, therefore, it may not be feasible to implement."}, {"procedure_id": "M0922", "procedure_name": "Restrict File and Directory Permissions", "procedure_description": "Protect files stored locally with proper permissions to limit opportunities for adversaries to interact and collect information from databases."}]},
{"technique_id": "T0832", "technique_name": "Manipulation of View", "technique_description": "Adversaries may attempt to manipulate the information reported back to operators or controllers. This manipulation may be short term or sustained. During this time the process itself could be in a much different state than what is reported.", "technique_url": "https://attack.mitre.org/techniques/T0832", "procedure_examples": [{"procedure_id": "S0604", "procedure_name": "Industroyer", "procedure_description": "'s OPC module can brute force values and will send out a 0x01 status which for the target systems equates to a Primary Variable Out of Limits misdirecting operators from understanding protective relay status."}, {"procedure_id": "S0603", "procedure_name": "Stuxnet", "procedure_description": "manipulates the view of operators replaying process input and manipulating the I/O image to evade detection and inhibit protection functions."}, {"procedure_id": "M0802", "procedure_name": "Communication Authenticity", "procedure_description": "Protocols used for control functions should provide authenticity through MAC functions or digital signatures. If not, utilize bump-in-the-wire devices or VPNs to enforce communication authenticity between devices that are not capable of supporting this (e.g., legacy controllers, RTUs)."}, {"procedure_id": "M0953", "procedure_name": "Data Backup", "procedure_description": "Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.  Maintain and exercise incident response plans"}, {"procedure_id": "M0810", "procedure_name": "Out-of-Band Communications Channel", "procedure_description": "Utilize out-of-band communication to validate the integrity of data from the primary channel."}]},
{"technique_id": "T0880", "technique_name": "Loss of Safety", "technique_description": "Adversaries may compromise safety system functions designed to maintain safe operation of a process when unacceptable or dangerous conditions occur. Safety systems are often composed of the same elements as control systems but have the sole purpose of ensuring the process fails in a predetermined safe manner.", "technique_url": "https://attack.mitre.org/techniques/T0880", "procedure_examples": [{"procedure_id": "S1009", "procedure_name": "Triton", "procedure_description": "has the capability to reprogram the SIS logic to allow unsafe conditions to persist or reprogram the SIS to allow an unsafe state  while using the DCS to create an unsafe state or hazard."}, {"procedure_id": "M0805", "procedure_name": "Mechanical Protection Layers", "procedure_description": "Protection devices should have minimal digital components to prevent exposure to related adversarial techniques. Examples include interlocks, rupture disks, release valves, etc."}, {"procedure_id": "M0812", "procedure_name": "Safety Instrumented Systems", "procedure_description": "Ensure that all SIS are segmented from operational networks to prevent them from being targeted by additional adversarial behavior."}]},
{"technique_id": "T0829", "technique_name": "Loss of View", "technique_description": "Adversaries may cause a sustained or permanent loss of view where the ICS equipment will require local, hands-on operator intervention; for instance, a restart or manual operation. By causing a sustained reporting or visibility loss, the adversary can effectively hide the present state of operations. This loss of view can occur without affecting the physical processes themselves.", "technique_url": "https://attack.mitre.org/techniques/T0829", "procedure_examples": [{"procedure_id": "S0604", "procedure_name": "Industroyer", "procedure_description": "'s data wiper component removes the registry image path throughout the system and overwrites all files, rendering the system unusable."}, {"procedure_id": "S0607", "procedure_name": "KillDisk", "procedure_description": "erases the master boot record (MBR) and system logs, leaving the system unusable."}, {"procedure_id": "S0372", "procedure_name": "LockerGoga", "procedure_description": "Some of Norsk Hydro's production systems were impacted by a"}, {"procedure_id": "C0031", "procedure_name": "Unitronics Defacement Campaign", "procedure_description": "During the"}, {"procedure_id": "M0953", "procedure_name": "Data Backup", "procedure_description": "Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.  Maintain and exercise incident response plans"}, {"procedure_id": "M0810", "procedure_name": "Out-of-Band Communications Channel", "procedure_description": "Provide operators with redundant, out-of-band communication to support monitoring and control of the operational processes, especially when recovering from a network outage"}, {"procedure_id": "M0811", "procedure_name": "Redundancy of Service", "procedure_description": "Hot-standbys in diverse locations can ensure continued operations if the primarily system are compromised or unavailable. At the network layer, protocols such as the Parallel Redundancy Protocol can be used to simultaneously use redundant and diverse communication over a local network."}]},
{"technique_id": "T0815", "technique_name": "Denial of View", "technique_description": "Adversaries may cause a denial of view in attempt to disrupt and prevent operator oversight on the status of an ICS environment. This may manifest itself as a temporary communication failure between a device and its control source, where the interface recovers and becomes available once the interference ceases.", "technique_url": "https://attack.mitre.org/techniques/T0815", "procedure_examples": [{"procedure_id": "S0604", "procedure_name": "Industroyer", "procedure_description": "is able to block serial COM channels temporarily causing a denial of view."}, {"procedure_id": "C0020", "procedure_name": "Maroochy Water Breach", "procedure_description": "In the"}, {"procedure_id": "M0953", "procedure_name": "Data Backup", "procedure_description": "Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.  Maintain and exercise incident response plans"}, {"procedure_id": "M0810", "procedure_name": "Out-of-Band Communications Channel", "procedure_description": "Provide operators with redundant, out-of-band communication to support monitoring and control of the operational processes, especially when recovering from a network outage"}, {"procedure_id": "M0811", "procedure_name": "Redundancy of Service", "procedure_description": "Hot-standbys in diverse locations can ensure continued operations if the primarily system are compromised or unavailable. At the network layer, protocols such as the Parallel Redundancy Protocol can be used to simultaneously use redundant and diverse communication over a local network."}]},
{"technique_id": "T0831", "technique_name": "Manipulation of Control", "technique_description": "Adversaries may manipulate physical process control within the industrial environment. Methods of manipulating control can include changes to set point values, tags, or other parameters. Adversaries may manipulate control systems devices or possibly leverage their own, to communicate with and command physical control processes. The duration of manipulation may be temporary or longer sustained, depending on operator detection.", "technique_url": "https://attack.mitre.org/techniques/T0831", "procedure_examples": [{"procedure_id": "C0028", "procedure_name": "2015 Ukraine Electric Power Attack", "procedure_description": "During the"}, {"procedure_id": "S0604", "procedure_name": "Industroyer", "procedure_description": "toggles breakers to the open state utilizing unauthorized command messages."}, {"procedure_id": "S0603", "procedure_name": "Stuxnet", "procedure_description": "can reprogram a PLC and change critical parameters in such a way that legitimate commands can be overridden or intercepted. In addition, Stuxnet can apply inappropriate command sequences or parameters to cause damage to property."}, {"procedure_id": "M0802", "procedure_name": "Communication Authenticity", "procedure_description": "Protocols used for control functions should provide authenticity through MAC functions or digital signatures. If not, utilize bump-in-the-wire devices or VPNs to enforce communication authenticity between devices that are not capable of supporting this (e.g., legacy controllers, RTUs)."}, {"procedure_id": "M0953", "procedure_name": "Data Backup", "procedure_description": "Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.  Maintain and exercise incident response plans"}, {"procedure_id": "M0810", "procedure_name": "Out-of-Band Communications Channel", "procedure_description": "Utilize out-of-band communication to validate the integrity of data from the primary channel."}]},
{"technique_id": "T0879", "technique_name": "Damage to Property", "technique_description": "Adversaries may cause damage and destruction of property to infrastructure, equipment, and the surrounding environment when attacking control systems. This technique may result in device and operational equipment breakdown, or represent tangential damage from other techniques used in an attack. Depending on the severity of physical damage and disruption caused to control processes and systems, this technique may result in", "technique_url": "https://attack.mitre.org/techniques/T0879", "procedure_examples": [{"procedure_id": "C0020", "procedure_name": "Maroochy Water Breach", "procedure_description": "In the"}, {"procedure_id": "M0805", "procedure_name": "Mechanical Protection Layers", "procedure_description": "Protection devices should have minimal digital components to prevent exposure to related adversarial techniques. Examples include interlocks, rupture disks, release valves, etc."}, {"procedure_id": "M0807", "procedure_name": "Network Allowlists", "procedure_description": "Use host-based allowlists to prevent devices from accepting connections from unauthorized systems. For example, allowlists can be used to ensure devices can only connect with master stations or known management/engineering workstations."}, {"procedure_id": "M0812", "procedure_name": "Safety Instrumented Systems", "procedure_description": "Ensure that all SIS are segmented from operational networks to prevent them from being targeted by additional adversarial behavior."}]},
{"technique_id": "T0837", "technique_name": "Loss of Protection", "technique_description": "Adversaries may compromise protective system functions designed to prevent the effects of faults and abnormal conditions. This can result in equipment damage, prolonged process disruptions and hazards to personnel.", "technique_url": "https://attack.mitre.org/techniques/T0837", "procedure_examples": [{"procedure_id": "S0604", "procedure_name": "Industroyer", "procedure_description": "contained a module which leveraged a vulnerability in the Siemens SIPROTEC relays (CVE-2015-5374) to create a Denial of Service against automated protective relays."}]},
{"technique_id": "T0828", "technique_name": "Loss of Productivity and Revenue", "technique_description": "Adversaries may cause loss of productivity and revenue through disruption and even damage to the availability and integrity of control system operations, devices, and related processes. This technique may manifest as a direct effect of an ICS-targeting attack or tangentially, due to an IT-targeting attack against non-segregated environments.", "technique_url": "https://attack.mitre.org/techniques/T0828", "procedure_examples": [{"procedure_id": "C0028", "procedure_name": "2015 Ukraine Electric Power Attack", "procedure_description": "During the"}, {"procedure_id": "S0606", "procedure_name": "Bad Rabbit", "procedure_description": "Several transportation organizations in Ukraine have suffered from being infected by"}, {"procedure_id": "S0608", "procedure_name": "Conficker", "procedure_description": "A"}, {"procedure_id": "S0605", "procedure_name": "EKANS", "procedure_description": "infection resulted in a temporary production loss within a Honda manufacturing plant."}, {"procedure_id": "S0372", "procedure_name": "LockerGoga", "procedure_description": "While Norsk Hydro attempted to recover from a"}, {"procedure_id": "S0368", "procedure_name": "NotPetya", "procedure_description": "disrupted manufacturing facilities supplying vaccines, resulting in a halt of production and the inability to meet demand for specific vaccines."}, {"procedure_id": "S0496", "procedure_name": "REvil", "procedure_description": "The"}, {"procedure_id": "S0446", "procedure_name": "Ryuk", "procedure_description": "An enterprise resource planning (ERP) manufacturing server was lost to the"}, {"procedure_id": "C0030", "procedure_name": "Triton Safety Instrumented System Attack", "procedure_description": "In the"}, {"procedure_id": "C0031", "procedure_name": "Unitronics Defacement Campaign", "procedure_description": "During the"}, {"procedure_id": "M0953", "procedure_name": "Data Backup", "procedure_description": "Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.  Maintain and exercise incident response plans"}]},
{"technique_id": "T0826", "technique_name": "Loss of Availability", "technique_description": "Adversaries may attempt to disrupt essential components or systems to prevent owner and operator from delivering products or services.", "technique_url": "https://attack.mitre.org/techniques/T0826", "procedure_examples": [{"procedure_id": "C0028", "procedure_name": "2015 Ukraine Electric Power Attack", "procedure_description": "During the"}, {"procedure_id": "S0608", "procedure_name": "Conficker", "procedure_description": "A"}, {"procedure_id": "C0031", "procedure_name": "Unitronics Defacement Campaign", "procedure_description": "During the"}, {"procedure_id": "M0953", "procedure_name": "Data Backup", "procedure_description": "Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.  Maintain and exercise incident response plans"}, {"procedure_id": "M0810", "procedure_name": "Out-of-Band Communications Channel", "procedure_description": "Provide operators with redundant, out-of-band communication to support monitoring and control of the operational processes, especially when recovering from a network outage"}, {"procedure_id": "M0811", "procedure_name": "Redundancy of Service", "procedure_description": "Hot-standbys in diverse locations can ensure continued operations if the primarily system is compromised or unavailable. At the network layer, protocols such as the Parallel Redundancy Protocol can be used to simultaneously use redundant and diverse communication over a local network."}]},
{"technique_id": "T0827", "technique_name": "Loss of Control", "technique_description": "Adversaries may seek to achieve a sustained loss of control or a runaway condition in which operators cannot issue any commands even if the malicious interference has subsided.", "technique_url": "https://attack.mitre.org/techniques/T0827", "procedure_examples": [{"procedure_id": "C0028", "procedure_name": "2015 Ukraine Electric Power Attack", "procedure_description": "During the"}, {"procedure_id": "S0604", "procedure_name": "Industroyer", "procedure_description": "'s data wiper component removes the registry image path throughout the system and overwrites all files, rendering the system unusable."}, {"procedure_id": "S0372", "procedure_name": "LockerGoga", "procedure_description": "Some of Norsk Hydro's production systems were impacted by a"}, {"procedure_id": "M0953", "procedure_name": "Data Backup", "procedure_description": "Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.  Maintain and exercise incident response plans"}, {"procedure_id": "M0810", "procedure_name": "Out-of-Band Communications Channel", "procedure_description": "Provide operators with redundant, out-of-band communication to support monitoring and control of the operational processes, especially when recovering from a network outage"}, {"procedure_id": "M0811", "procedure_name": "Redundancy of Service", "procedure_description": "Hot-standbys in diverse locations can ensure continued operations if the primarily system are compromised or unavailable. At the network layer, protocols such as the Parallel Redundancy Protocol can be used to simultaneously use redundant and diverse communication over a local network."}]},
{"technique_id": "T0813", "technique_name": "Denial of Control", "technique_description": "Adversaries may cause a denial of control to temporarily prevent operators and engineers from interacting with process controls. An adversary may attempt to deny process control access to cause a temporary loss of communication with the control device or to prevent operator adjustment of process controls. An affected process may still be operating during the period of control loss, but not necessarily in a desired state.", "technique_url": "https://attack.mitre.org/techniques/T0813", "procedure_examples": [{"procedure_id": "C0028", "procedure_name": "2015 Ukraine Electric Power Attack", "procedure_description": "During the"}, {"procedure_id": "S0604", "procedure_name": "Industroyer", "procedure_description": "is able to block serial COM channels temporarily causing a denial of control."}, {"procedure_id": "C0020", "procedure_name": "Maroochy Water Breach", "procedure_description": "In the"}, {"procedure_id": "M0953", "procedure_name": "Data Backup", "procedure_description": "Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.  Maintain and exercise incident response plans"}, {"procedure_id": "M0810", "procedure_name": "Out-of-Band Communications Channel", "procedure_description": "Provide operators with redundant, out-of-band communication to support monitoring and control of the operational processes, especially when recovering from a network outage"}, {"procedure_id": "M0811", "procedure_name": "Redundancy of Service", "procedure_description": "Hot-standbys in diverse locations can ensure continued operations if the primarily system are compromised or unavailable. At the network layer, protocols such as the Parallel Redundancy Protocol can be used to simultaneously use redundant and diverse communication over a local network."}]}
]